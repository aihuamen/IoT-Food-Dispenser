
IoT_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dac  08007dac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db4  08007db4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aec  20000074  08007e30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b60  08007e30  00024b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aaf1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033ca  00000000  00000000  0003ab95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001658  00000000  00000000  0003df60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001508  00000000  00000000  0003f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017821  00000000  00000000  00040ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011500  00000000  00000000  000582e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098961  00000000  00000000  000697e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102142  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006304  00000000  00000000  001021c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c80 	.word	0x08007c80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007c80 	.word	0x08007c80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b972 	b.w	8000d78 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14b      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4615      	mov	r5, r2
 8000abe:	d967      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0720 	rsb	r7, r2, #32
 8000aca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ace:	fa20 f707 	lsr.w	r7, r0, r7
 8000ad2:	4095      	lsls	r5, r2
 8000ad4:	ea47 0803 	orr.w	r8, r7, r3
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ae4:	fa1f fc85 	uxth.w	ip, r5
 8000ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af0:	fb07 f10c 	mul.w	r1, r7, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000afe:	f080 811b 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8118 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b08:	3f02      	subs	r7, #2
 8000b0a:	442b      	add	r3, r5
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	192c      	adds	r4, r5, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8107 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	f240 8104 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b34:	3802      	subs	r0, #2
 8000b36:	442c      	add	r4, r5
 8000b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b3c:	eba4 040c 	sub.w	r4, r4, ip
 8000b40:	2700      	movs	r7, #0
 8000b42:	b11e      	cbz	r6, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0xbe>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80eb 	beq.w	8000d32 <__udivmoddi4+0x286>
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b62:	4638      	mov	r0, r7
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f783 	clz	r7, r3
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d147      	bne.n	8000c02 <__udivmoddi4+0x156>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0xd0>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80fa 	bhi.w	8000d70 <__udivmoddi4+0x2c4>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	4698      	mov	r8, r3
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d0e0      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b8e:	e7dd      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xe8>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f040 808f 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9e:	1b49      	subs	r1, r1, r5
 8000ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba4:	fa1f f885 	uxth.w	r8, r5
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x14c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x14a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80b6 	bhi.w	8000d62 <__udivmoddi4+0x2b6>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e79f      	b.n	8000b42 <__udivmoddi4+0x96>
 8000c02:	f1c7 0c20 	rsb	ip, r7, #32
 8000c06:	40bb      	lsls	r3, r7
 8000c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c10:	fa01 f407 	lsl.w	r4, r1, r7
 8000c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c20:	4325      	orrs	r5, r4
 8000c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c26:	0c2c      	lsrs	r4, r5, #16
 8000c28:	fb08 3319 	mls	r3, r8, r9, r3
 8000c2c:	fa1f fa8e 	uxth.w	sl, lr
 8000c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c34:	fb09 f40a 	mul.w	r4, r9, sl
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1e 0303 	adds.w	r3, lr, r3
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	f080 8087 	bcs.w	8000d5e <__udivmoddi4+0x2b2>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f240 8084 	bls.w	8000d5e <__udivmoddi4+0x2b2>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4473      	add	r3, lr
 8000c5c:	1b1b      	subs	r3, r3, r4
 8000c5e:	b2ad      	uxth	r5, r5
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c70:	45a2      	cmp	sl, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1e 0404 	adds.w	r4, lr, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	d26b      	bcs.n	8000d56 <__udivmoddi4+0x2aa>
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d969      	bls.n	8000d56 <__udivmoddi4+0x2aa>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4474      	add	r4, lr
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	eba4 040a 	sub.w	r4, r4, sl
 8000c92:	454c      	cmp	r4, r9
 8000c94:	46c2      	mov	sl, r8
 8000c96:	464b      	mov	r3, r9
 8000c98:	d354      	bcc.n	8000d44 <__udivmoddi4+0x298>
 8000c9a:	d051      	beq.n	8000d40 <__udivmoddi4+0x294>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d069      	beq.n	8000d74 <__udivmoddi4+0x2c8>
 8000ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	40fc      	lsrs	r4, r7
 8000cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e747      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000cbc:	f1c2 0320 	rsb	r3, r2, #32
 8000cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	4338      	orrs	r0, r7
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cda:	fa1f f885 	uxth.w	r8, r5
 8000cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb07 f308 	mul.w	r3, r7, r8
 8000cea:	428b      	cmp	r3, r1
 8000cec:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x256>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf8:	d22f      	bcs.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d92d      	bls.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfe:	3f02      	subs	r7, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	b281      	uxth	r1, r0
 8000d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d12:	fb00 f308 	mul.w	r3, r0, r8
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x27e>
 8000d1a:	1869      	adds	r1, r5, r1
 8000d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d20:	d217      	bcs.n	8000d52 <__udivmoddi4+0x2a6>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d915      	bls.n	8000d52 <__udivmoddi4+0x2a6>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4429      	add	r1, r5
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xfe>
 8000d32:	4637      	mov	r7, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e709      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d38:	4607      	mov	r7, r0
 8000d3a:	e6e7      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fb      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d40:	4541      	cmp	r1, r8
 8000d42:	d2ab      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d48:	eb69 020e 	sbc.w	r2, r9, lr
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	e7a4      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d52:	4660      	mov	r0, ip
 8000d54:	e7e9      	b.n	8000d2a <__udivmoddi4+0x27e>
 8000d56:	4618      	mov	r0, r3
 8000d58:	e795      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	e7d1      	b.n	8000d02 <__udivmoddi4+0x256>
 8000d5e:	4681      	mov	r9, r0
 8000d60:	e77c      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	442c      	add	r4, r5
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0x14c>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	442b      	add	r3, r5
 8000d6e:	e72f      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d70:	4638      	mov	r0, r7
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xda>
 8000d74:	4637      	mov	r7, r6
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0xa0>

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <delayUS_DWT>:

/* Clock signal need to be at least 1 micro second wide, those delays are generated with DWT		*/
/* More info:  https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ */
#pragma push
#pragma O3
static void delayUS_DWT(uint32_t us) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <delayUS_DWT+0x48>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <delayUS_DWT+0x4c>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	60fb      	str	r3, [r7, #12]
	volatile uint32_t start = DWT->CYCCNT;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <delayUS_DWT+0x50>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	60bb      	str	r3, [r7, #8]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <delayUS_DWT+0x50>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <delayUS_DWT+0x50>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6013      	str	r3, [r2, #0]
	do  {
	} while(DWT->CYCCNT - start < cycles);
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <delayUS_DWT+0x50>)
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3f8      	bcc.n	8000daa <delayUS_DWT+0x2e>
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	431bde83 	.word	0x431bde83
 8000dcc:	e0001000 	.word	0xe0001000

08000dd0 <writeSDA>:
#pragma pop


// SDA Write(output) Mode
static void writeSDA(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <writeSDA+0x24>)
 8000de8:	f001 f960 	bl	80020ac <HAL_GPIO_Init>
	
}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40020400 	.word	0x40020400

08000df8 <readSDA>:

// SDA Read(input) Mode
static void readSDA(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000e06:	2302      	movs	r3, #2
 8000e08:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <readSDA+0x28>)
 8000e14:	f001 f94a 	bl	80020ac <HAL_GPIO_Init>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400

08000e24 <DS1302_SendCmd>:

/* Sends an address or command */
static void DS1302_SendCmd(uint8_t cmd) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e020      	b.n	8000e76 <DS1302_SendCmd+0x52>
	{	
//		DS1302_SDA = (bit)(addr & 1); 
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4810      	ldr	r0, [pc, #64]	; (8000e84 <DS1302_SendCmd+0x60>)
 8000e42:	f001 facd 	bl	80023e0 <HAL_GPIO_WritePin>
//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <DS1302_SendCmd+0x60>)
 8000e4e:	f001 fac7 	bl	80023e0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff ff92 	bl	8000d7c <delayUS_DWT>
//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <DS1302_SendCmd+0x60>)
 8000e60:	f001 fabe 	bl	80023e0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ff89 	bl	8000d7c <delayUS_DWT>
		cmd >>= 1;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	3301      	adds	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b07      	cmp	r3, #7
 8000e7a:	d9db      	bls.n	8000e34 <DS1302_SendCmd+0x10>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40020400 	.word	0x40020400

08000e88 <DS1302_WriteByte>:


/* Writes a byte to 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	481d      	ldr	r0, [pc, #116]	; (8000f14 <DS1302_WriteByte+0x8c>)
 8000e9e:	f001 fa9f 	bl	80023e0 <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Sends address
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ffbd 	bl	8000e24 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e020      	b.n	8000ef2 <DS1302_WriteByte+0x6a>
	{
//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4815      	ldr	r0, [pc, #84]	; (8000f14 <DS1302_WriteByte+0x8c>)
 8000ebe:	f001 fa8f 	bl	80023e0 <HAL_GPIO_WritePin>
//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <DS1302_WriteByte+0x8c>)
 8000eca:	f001 fa89 	bl	80023e0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ff54 	bl	8000d7c <delayUS_DWT>
//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <DS1302_WriteByte+0x8c>)
 8000edc:	f001 fa80 	bl	80023e0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff ff4b 	bl	8000d7c <delayUS_DWT>
		d >>= 1;
 8000ee6:	79bb      	ldrb	r3, [r7, #6]
 8000ee8:	085b      	lsrs	r3, r3, #1
 8000eea:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	d9db      	bls.n	8000eb0 <DS1302_WriteByte+0x28>
	}
	
//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2120      	movs	r1, #32
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <DS1302_WriteByte+0x8c>)
 8000efe:	f001 fa6f 	bl	80023e0 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <DS1302_WriteByte+0x8c>)
 8000f08:	f001 fa6a 	bl	80023e0 <HAL_GPIO_WritePin>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020400 	.word	0x40020400

08000f18 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr) 
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73bb      	strb	r3, [r7, #14]

//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000f26:	2201      	movs	r2, #1
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <DS1302_ReadByte+0xa0>)
 8000f2c:	f001 fa58 	bl	80023e0 <HAL_GPIO_WritePin>
	addr = addr | 0x01; // Generate Read Address
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff72 	bl	8000e24 <DS1302_SendCmd>
	
	readSDA();
 8000f40:	f7ff ff5a 	bl	8000df8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e022      	b.n	8000f90 <DS1302_ReadByte+0x78>
	{
		temp >>= 1;
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	73bb      	strb	r3, [r7, #14]
//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 8000f50:	2110      	movs	r1, #16
 8000f52:	4819      	ldr	r0, [pc, #100]	; (8000fb8 <DS1302_ReadByte+0xa0>)
 8000f54:	f001 fa2c 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f64:	73bb      	strb	r3, [r7, #14]
//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <DS1302_ReadByte+0xa0>)
 8000f6e:	f001 fa37 	bl	80023e0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff ff02 	bl	8000d7c <delayUS_DWT>
//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <DS1302_ReadByte+0xa0>)
 8000f80:	f001 fa2e 	bl	80023e0 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fef9 	bl	8000d7c <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	d9d9      	bls.n	8000f4a <DS1302_ReadByte+0x32>
	}
	writeSDA();
 8000f96:	f7ff ff1b 	bl	8000dd0 <writeSDA>

//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <DS1302_ReadByte+0xa0>)
 8000fa0:	f001 fa1e 	bl	80023e0 <HAL_GPIO_WritePin>
//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <DS1302_ReadByte+0xa0>)
 8000faa:	f001 fa19 	bl	80023e0 <HAL_GPIO_WritePin>
	return temp;
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40020400 	.word	0x40020400

08000fbc <DS1302_ReadTime>:
}


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 8000fc4:	208c      	movs	r0, #140	; 0x8c
 8000fc6:	f7ff ffa7 	bl	8000f18 <DS1302_ReadByte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	b2d9      	uxtb	r1, r3
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	440a      	add	r2, r1
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 8000ff0:	2088      	movs	r0, #136	; 0x88
 8000ff2:	f7ff ff91 	bl	8000f18 <DS1302_ReadByte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	b2d9      	uxtb	r1, r3
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2da      	uxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3302      	adds	r3, #2
 8001016:	440a      	add	r2, r1
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 800101c:	2086      	movs	r0, #134	; 0x86
 800101e:	f7ff ff7b 	bl	8000f18 <DS1302_ReadByte>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	b2d9      	uxtb	r1, r3
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4413      	add	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3303      	adds	r3, #3
 8001042:	440a      	add	r2, r1
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8001048:	2084      	movs	r0, #132	; 0x84
 800104a:	f7ff ff65 	bl	8000f18 <DS1302_ReadByte>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	b2d9      	uxtb	r1, r3
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3304      	adds	r3, #4
 800106e:	440a      	add	r2, r1
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 8001074:	2082      	movs	r0, #130	; 0x82
 8001076:	f7ff ff4f 	bl	8000f18 <DS1302_ReadByte>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3305      	adds	r3, #5
 800109a:	440a      	add	r2, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC))&0x7F; 
 80010a0:	2080      	movs	r0, #128	; 0x80
 80010a2:	f7ff ff39 	bl	8000f18 <DS1302_ReadByte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3306      	adds	r3, #6
 80010ca:	440a      	add	r2, r1
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 80010d0:	208a      	movs	r0, #138	; 0x8a
 80010d2:	f7ff ff21 	bl	8000f18 <DS1302_ReadByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	b2d9      	uxtb	r1, r3
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3307      	adds	r3, #7
 80010f6:	440a      	add	r2, r1
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <DS1302_Init>:

/* Initialization */
void DS1302_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 800110a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800110e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4619      	mov	r1, r3
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <DS1302_Init+0x50>)
 800111e:	f000 ffc5 	bl	80020ac <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER,0x00);			// Disable Trickle Charger 
 8001122:	2100      	movs	r1, #0
 8001124:	2090      	movs	r0, #144	; 0x90
 8001126:	f7ff feaf 	bl	8000e88 <DS1302_WriteByte>
		
//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <DS1302_Init+0x50>)
 8001130:	f001 f956 	bl	80023e0 <HAL_GPIO_WritePin>
//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <DS1302_Init+0x50>)
 800113c:	f001 f950 	bl	80023e0 <HAL_GPIO_WritePin>

//	DWT->CTRL |= 1 ; // enable the counter for microsecond delay, see "void delayUS_DWT(uint32_t us)"
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <DS1302_Init+0x54>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <DS1302_Init+0x54>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020400 	.word	0x40020400
 8001158:	e0001000 	.word	0xe0001000

0800115c <HX711_Init>:
#include "hx711.h"

void HX711_Init(HX711 data)
{
 800115c:	b084      	sub	sp, #16
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	f107 0c20 	add.w	ip, r7, #32
 8001168:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = data.pinSck;
 800116c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800116e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioSck, &GPIO_InitStruct);
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	1d3a      	adds	r2, r7, #4
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f000 ff92 	bl	80020ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = data.pinData;
 8001188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800118a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	1d3a      	adds	r2, r7, #4
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 ff84 	bl	80020ac <HAL_GPIO_Init>

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80011a8:	2201      	movs	r2, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f918 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80011b0:	2032      	movs	r0, #50	; 0x32
 80011b2:	f000 fe77 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioData, data.pinSck, GPIO_PIN_RESET);
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80011ba:	2200      	movs	r2, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 f90f 	bl	80023e0 <HAL_GPIO_WritePin>

}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011cc:	b004      	add	sp, #16
 80011ce:	4770      	bx	lr

080011d0 <HX711_Average_Value>:

int HX711_Average_Value(HX711 data, uint8_t times)
{
 80011d0:	b084      	sub	sp, #16
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af02      	add	r7, sp, #8
 80011d8:	f107 0c10 	add.w	ip, r7, #16
 80011dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    int sum = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < times; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	e00d      	b.n	8001206 <HX711_Average_Value+0x36>
    {
        sum += HX711_Value(data);
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f4:	f000 f818 	bl	8001228 <HX711_Value>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < times; i++)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbec      	blt.n	80011ea <HX711_Average_Value+0x1a>
    }

    return sum / times;
 8001210:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001224:	b004      	add	sp, #16
 8001226:	4770      	bx	lr

08001228 <HX711_Value>:

int HX711_Value(HX711 data)
{
 8001228:	b084      	sub	sp, #16
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	f107 0c18 	add.w	ip, r7, #24
 8001234:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    int buffer;
    buffer = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
 800123c:	bf00      	nop
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f001 f8b3 	bl	80023b0 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d0f6      	beq.n	800123e <HX711_Value+0x16>
    ;

    for (uint8_t i = 0; i < 24; i++)
 8001250:	2300      	movs	r3, #0
 8001252:	72fb      	strb	r3, [r7, #11]
 8001254:	e01d      	b.n	8001292 <HX711_Value+0x6a>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	8c39      	ldrh	r1, [r7, #32]
 800125a:	2201      	movs	r2, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f8bf 	bl	80023e0 <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]

        if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f001 f89e 	bl	80023b0 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HX711_Value+0x58>
        {
            buffer ++;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	8c39      	ldrh	r1, [r7, #32]
 8001284:	2200      	movs	r2, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f8aa 	bl	80023e0 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 24; i++)
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	3301      	adds	r3, #1
 8001290:	72fb      	strb	r3, [r7, #11]
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	2b17      	cmp	r3, #23
 8001296:	d9de      	bls.n	8001256 <HX711_Value+0x2e>
    }

    for (int i = 0; i < data.gain; i++)
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	e00e      	b.n	80012bc <HX711_Value+0x94>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	8c39      	ldrh	r1, [r7, #32]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 f89b 	bl	80023e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	8c39      	ldrh	r1, [r7, #32]
 80012ae:	2200      	movs	r2, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 f895 	bl	80023e0 <HAL_GPIO_WritePin>
    for (int i = 0; i < data.gain; i++)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbec      	blt.n	800129e <HX711_Value+0x76>
    }

    buffer = buffer ^ 0x800000;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80012ca:	60fb      	str	r3, [r7, #12]

    return buffer;
 80012cc:	68fb      	ldr	r3, [r7, #12]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012d8:	b004      	add	sp, #16
 80012da:	4770      	bx	lr

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f000 fd9e 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 f840 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 f9a2 	bl	8001630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ec:	f000 f976 	bl	80015dc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80012f0:	f000 f8a2 	bl	8001438 <MX_I2C2_Init>
  MX_I2C3_Init();
 80012f4:	f000 f8ce 	bl	8001494 <MX_I2C3_Init>
  MX_TIM3_Init();
 80012f8:	f000 f8fa 	bl	80014f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  DS1302_Init();
 80012fc:	f7ff ff02 	bl	8001104 <DS1302_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	4810      	ldr	r0, [pc, #64]	; (8001344 <main+0x68>)
 8001304:	f001 fed6 	bl	80030b4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001308:	f003 f9b6 	bl	8004678 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <main+0x6c>)
 800130e:	2101      	movs	r1, #1
 8001310:	2001      	movs	r0, #1
 8001312:	f003 faef 	bl	80048f4 <osSemaphoreNew>
 8001316:	4602      	mov	r2, r0
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <main+0x70>)
 800131a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <main+0x74>)
 800131e:	2100      	movs	r1, #0
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <main+0x78>)
 8001322:	f003 fa13 	bl	800474c <osThreadNew>
 8001326:	4602      	mov	r2, r0
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <main+0x7c>)
 800132a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  secondTaskHandle = osThreadNew(vSecondTask, NULL, &secondTask_attributes);
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <main+0x80>)
 800132e:	2100      	movs	r1, #0
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <main+0x84>)
 8001332:	f003 fa0b 	bl	800474c <osThreadNew>
 8001336:	4602      	mov	r2, r0
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <main+0x88>)
 800133a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800133c:	f003 f9d0 	bl	80046e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	e7fe      	b.n	8001340 <main+0x64>
 8001342:	bf00      	nop
 8001344:	20004a54 	.word	0x20004a54
 8001348:	08007d2c 	.word	0x08007d2c
 800134c:	20004a94 	.word	0x20004a94
 8001350:	08007d08 	.word	0x08007d08
 8001354:	08001881 	.word	0x08001881
 8001358:	200049a8 	.word	0x200049a8
 800135c:	08007d3c 	.word	0x08007d3c
 8001360:	08001781 	.word	0x08001781
 8001364:	200049a4 	.word	0x200049a4

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	2230      	movs	r2, #48	; 0x30
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f006 f87d 	bl	8007476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <SystemClock_Config+0xc8>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a26      	ldr	r2, [pc, #152]	; (8001430 <SystemClock_Config+0xc8>)
 8001396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <SystemClock_Config+0xc8>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <SystemClock_Config+0xcc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <SystemClock_Config+0xcc>)
 80013b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <SystemClock_Config+0xcc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80013dc:	2340      	movs	r3, #64	; 0x40
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 f949 	bl	8002684 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013f8:	f000 fa9e 	bl	8001938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fba3 	bl	8002b64 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001424:	f000 fa88 	bl	8001938 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C2_Init+0x50>)
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <MX_I2C2_Init+0x54>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_I2C2_Init+0x50>)
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_I2C2_Init+0x58>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C2_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_I2C2_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_I2C2_Init+0x50>)
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_I2C2_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_I2C2_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_I2C2_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_I2C2_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_I2C2_Init+0x50>)
 8001476:	f000 ffcd 	bl	8002414 <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 fa5a 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20004a00 	.word	0x20004a00
 800148c:	40005800 	.word	0x40005800
 8001490:	000186a0 	.word	0x000186a0

08001494 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_I2C3_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <MX_I2C3_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_I2C3_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_I2C3_Init+0x50>)
 80014d2:	f000 ff9f 	bl	8002414 <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 fa2c 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200049ac 	.word	0x200049ac
 80014e8:	40005c00 	.word	0x40005c00
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001522:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <MX_TIM3_Init+0xe8>)
 8001524:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3199;
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001528:	f640 427f 	movw	r2, #3199	; 0xc7f
 800152c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001536:	22c7      	movs	r2, #199	; 0xc7
 8001538:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_TIM3_Init+0xe4>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001548:	f001 fd30 	bl	8002fac <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001552:	f000 f9f1 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800155c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001560:	4619      	mov	r1, r3
 8001562:	481c      	ldr	r0, [pc, #112]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001564:	f001 ffa6 	bl	80034b4 <HAL_TIM_ConfigClockSource>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800156e:	f000 f9e3 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001572:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001574:	f001 fd69 	bl	800304a <HAL_TIM_PWM_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800157e:	f000 f9db 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	4619      	mov	r1, r3
 8001590:	4810      	ldr	r0, [pc, #64]	; (80015d4 <MX_TIM3_Init+0xe4>)
 8001592:	f002 fb3b 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800159c:	f000 f9cc 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a0:	2360      	movs	r3, #96	; 0x60
 80015a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM3_Init+0xe4>)
 80015b8:	f001 feb6 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015c2:	f000 f9b9 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM3_Init+0xe4>)
 80015c8:	f000 fab6 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 80015cc:	bf00      	nop
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20004a54 	.word	0x20004a54
 80015d8:	40000400 	.word	0x40000400

080015dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_USART2_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001614:	f002 fb7c 	bl	8003d10 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 f98b 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20004a98 	.word	0x20004a98
 800162c:	40004400 	.word	0x40004400

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <MX_GPIO_Init+0x138>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a46      	ldr	r2, [pc, #280]	; (8001768 <MX_GPIO_Init+0x138>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <MX_GPIO_Init+0x138>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <MX_GPIO_Init+0x138>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <MX_GPIO_Init+0x138>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <MX_GPIO_Init+0x138>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <MX_GPIO_Init+0x138>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a38      	ldr	r2, [pc, #224]	; (8001768 <MX_GPIO_Init+0x138>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <MX_GPIO_Init+0x138>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <MX_GPIO_Init+0x138>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a31      	ldr	r2, [pc, #196]	; (8001768 <MX_GPIO_Init+0x138>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <MX_GPIO_Init+0x138>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2120      	movs	r1, #32
 80016ba:	482c      	ldr	r0, [pc, #176]	; (800176c <MX_GPIO_Init+0x13c>)
 80016bc:	f000 fe90 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HS711SCK_GPIO_Port, HS711SCK_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c6:	482a      	ldr	r0, [pc, #168]	; (8001770 <MX_GPIO_Init+0x140>)
 80016c8:	f000 fe8a 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2120      	movs	r1, #32
 80016d0:	4828      	ldr	r0, [pc, #160]	; (8001774 <MX_GPIO_Init+0x144>)
 80016d2:	f000 fe85 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <MX_GPIO_Init+0x148>)
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4821      	ldr	r0, [pc, #132]	; (8001770 <MX_GPIO_Init+0x140>)
 80016ec:	f000 fcde 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016f0:	2320      	movs	r3, #32
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <MX_GPIO_Init+0x13c>)
 8001708:	f000 fcd0 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711OUTPUT_Pin */
  GPIO_InitStruct.Pin = HX711OUTPUT_Pin;
 800170c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4813      	ldr	r0, [pc, #76]	; (8001770 <MX_GPIO_Init+0x140>)
 8001722:	f000 fcc3 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : HS711SCK_Pin */
  GPIO_InitStruct.Pin = HS711SCK_Pin;
 8001726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HS711SCK_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_GPIO_Init+0x140>)
 8001740:	f000 fcb4 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001744:	2320      	movs	r3, #32
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_GPIO_Init+0x144>)
 800175c:	f000 fca6 	bl	80020ac <HAL_GPIO_Init>

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020800 	.word	0x40020800
 8001774:	40020400 	.word	0x40020400
 8001778:	10210000 	.word	0x10210000
 800177c:	00000000 	.word	0x00000000

08001780 <vSecondTask>:

/* USER CODE BEGIN 4 */

void vSecondTask(void *argument) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b0c1      	sub	sp, #260	; 0x104
 8001784:	af02      	add	r7, sp, #8
 8001786:	6078      	str	r0, [r7, #4]
	HX711 hx11;
	hx11.gpioSck = HS711SCK_GPIO_Port;
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <vSecondTask+0xf8>)
 800178a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	hx11.gpioData = HX711OUTPUT_GPIO_Port;
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <vSecondTask+0xf8>)
 8001790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	hx11.pinSck = HS711SCK_Pin;
 8001794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001798:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	hx11.pinData = HX711OUTPUT_Pin;
 800179c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a0:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	hx11.offset = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	hx11.gain = 128;
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	HX711_Init(hx11);
 80017b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017bc:	f7ff fcce 	bl	800115c <HX711_Init>
	uint8_t masage[100];
	uint8_t masage2[100];
	int times = 10;
 80017c0:	230a      	movs	r3, #10
 80017c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	volatile int meres = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
	volatile int meresAtlag =0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
	volatile int tarevalue=0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]

	for (;;) {
		meres = HX711_Value(hx11);
 80017d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017de:	f7ff fd23 	bl	8001228 <HX711_Value>
 80017e2:	4603      	mov	r3, r0
 80017e4:	617b      	str	r3, [r7, #20]
		meres -= tarevalue;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
		meres = meres*0.002139*2;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe9f 	bl	8000534 <__aeabi_i2d>
 80017f6:	a31e      	add	r3, pc, #120	; (adr r3, 8001870 <vSecondTask+0xf0>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe ff04 	bl	8000608 <__aeabi_dmul>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	4618      	mov	r0, r3
 8001806:	4621      	mov	r1, r4
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	f7fe fd46 	bl	800029c <__adddf3>
 8001810:	4603      	mov	r3, r0
 8001812:	460c      	mov	r4, r1
 8001814:	4618      	mov	r0, r3
 8001816:	4621      	mov	r1, r4
 8001818:	f7ff f908 	bl	8000a2c <__aeabi_d2iz>
 800181c:	4603      	mov	r3, r0
 800181e:	617b      	str	r3, [r7, #20]
		osDelay(100);
 8001820:	2064      	movs	r0, #100	; 0x64
 8001822:	f003 f839 	bl	8004898 <osDelay>
//		HAL_UART_Transmit(&huart2, masage, sprintf(masage,"weight(gram) = %d\n\r", meres),1000);
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== GPIO_PIN_RESET)  {
 8001826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182a:	4813      	ldr	r0, [pc, #76]	; (8001878 <vSecondTask+0xf8>)
 800182c:	f000 fdc0 	bl	80023b0 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10c      	bne.n	8001850 <vSecondTask+0xd0>
			tarevalue = HX711_Average_Value(hx11, times);
 8001836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001848:	f7ff fcc2 	bl	80011d0 <HX711_Average_Value>
 800184c:	4603      	mov	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]
		}
		if(meres > 500 && meres < 10000) {
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001856:	ddbc      	ble.n	80017d2 <vSecondTask+0x52>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f242 720f 	movw	r2, #9999	; 0x270f
 800185e:	4293      	cmp	r3, r2
 8001860:	dcb7      	bgt.n	80017d2 <vSecondTask+0x52>
			htim3.Instance->CCR1 = 15;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <vSecondTask+0xfc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	220f      	movs	r2, #15
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
		meres = HX711_Value(hx11);
 800186a:	e7b2      	b.n	80017d2 <vSecondTask+0x52>
 800186c:	f3af 8000 	nop.w
 8001870:	e17a02fb 	.word	0xe17a02fb
 8001874:	3f6185ce 	.word	0x3f6185ce
 8001878:	40020800 	.word	0x40020800
 800187c:	20004a54 	.word	0x20004a54

08001880 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b0a5      	sub	sp, #148	; 0x94
 8001884:	af02      	add	r7, sp, #8
 8001886:	6078      	str	r0, [r7, #4]
	uint8_t setTime[10];
	char buffer[100];
  /* Infinite loop */
  for(;;)
  {
    DS1302_ReadTime(&time);
 8001888:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb95 	bl	8000fbc <DS1302_ReadTime>
//	sprintf(buffer, "this is a test,year: %d, month: %d, date: %d hour: %d, minutes: %d, seconds: %d\r\n",time[1], time[2], time[3], time[4], time[5], time[6]);
    sprintf(buffer, "hour: %d, minutes: %d, seconds: %d, day: %d \r\n",time[4], time[5], time[6], time[7]);
 8001892:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001896:	4619      	mov	r1, r3
 8001898:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800189c:	461c      	mov	r4, r3
 800189e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80018a2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80018a6:	f107 000c 	add.w	r0, r7, #12
 80018aa:	9201      	str	r2, [sp, #4]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	4623      	mov	r3, r4
 80018b0:	460a      	mov	r2, r1
 80018b2:	4915      	ldr	r1, [pc, #84]	; (8001908 <StartDefaultTask+0x88>)
 80018b4:	f005 fde8 	bl	8007488 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fc8f 	bl	80001e0 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f107 010c 	add.w	r1, r7, #12
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	480f      	ldr	r0, [pc, #60]	; (800190c <StartDefaultTask+0x8c>)
 80018d0:	f002 fa6b 	bl	8003daa <HAL_UART_Transmit>
    osDelay(1000);
 80018d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018d8:	f002 ffde 	bl	8004898 <osDelay>

    if(time[6] == 15 || time[6] == 45 || time[6] == 30) {
 80018dc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d007      	beq.n	80018f4 <StartDefaultTask+0x74>
 80018e4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80018e8:	2b2d      	cmp	r3, #45	; 0x2d
 80018ea:	d003      	beq.n	80018f4 <StartDefaultTask+0x74>
 80018ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80018f0:	2b1e      	cmp	r3, #30
 80018f2:	d1c9      	bne.n	8001888 <StartDefaultTask+0x8>
//		  for(int i=15;i<20;i++){
//			  htim3.Instance->CCR1 = i;
//			  HAL_Delay(100);
//		  }
    	htim3.Instance->CCR1 = 5;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <StartDefaultTask+0x90>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2205      	movs	r2, #5
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
    	osDelay(1000);
 80018fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001900:	f002 ffca 	bl	8004898 <osDelay>
  {
 8001904:	e7c0      	b.n	8001888 <StartDefaultTask+0x8>
 8001906:	bf00      	nop
 8001908:	08007cc0 	.word	0x08007cc0
 800190c:	20004a98 	.word	0x20004a98
 8001910:	20004a54 	.word	0x20004a54

08001914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001926:	f000 fa9d 	bl	8001e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40010000 	.word	0x40010000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <HAL_I2C_MspInit+0x148>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d13e      	bne.n	8001a38 <HAL_I2C_MspInit+0xa0>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019e8:	2304      	movs	r3, #4
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	483d      	ldr	r0, [pc, #244]	; (8001ae8 <HAL_I2C_MspInit+0x150>)
 80019f4:	f000 fb5a 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fe:	2312      	movs	r3, #18
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001a0a:	2309      	movs	r3, #9
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4834      	ldr	r0, [pc, #208]	; (8001ae8 <HAL_I2C_MspInit+0x150>)
 8001a16:	f000 fb49 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a30      	ldr	r2, [pc, #192]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a36:	e04f      	b.n	8001ad8 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <HAL_I2C_MspInit+0x154>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d14a      	bne.n	8001ad8 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a80:	2312      	movs	r3, #18
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	4816      	ldr	r0, [pc, #88]	; (8001af0 <HAL_I2C_MspInit+0x158>)
 8001a98:	f000 fb08 	bl	80020ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa0:	2312      	movs	r3, #18
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001aac:	2309      	movs	r3, #9
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <HAL_I2C_MspInit+0x150>)
 8001ab8:	f000 faf8 	bl	80020ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001ac6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_I2C_MspInit+0x14c>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
}
 8001ad8:	bf00      	nop
 8001ada:	3730      	adds	r7, #48	; 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40005800 	.word	0x40005800
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40005c00 	.word	0x40005c00
 8001af0:	40020000 	.word	0x40020000

08001af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0x3c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10d      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_Base_MspInit+0x40>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_TIM_Base_MspInit+0x40>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_TIM_Base_MspInit+0x40>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_TIM_MspPostInit+0x68>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11d      	bne.n	8001b96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_TIM_MspPostInit+0x70>)
 8001b92:	f000 fa8b 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12b      	bne.n	8001c26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c06:	230c      	movs	r3, #12
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c16:	2307      	movs	r3, #7
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_UART_MspInit+0x8c>)
 8001c22:	f000 fa43 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000

08001c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	2019      	movs	r0, #25
 8001c52:	f000 fa01 	bl	8002058 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c56:	2019      	movs	r0, #25
 8001c58:	f000 fa1a 	bl	8002090 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_InitTick+0xa0>)
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_InitTick+0xa0>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_InitTick+0xa0>)
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c78:	f107 0210 	add.w	r2, r7, #16
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 f960 	bl	8002f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c88:	f001 f94a 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 8001c8c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0c9b      	lsrs	r3, r3, #18
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <HAL_InitTick+0xac>)
 8001ca0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001ca4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cbc:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001cbe:	f001 f975 	bl	8002fac <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d104      	bne.n	8001cd2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001cc8:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001cca:	f001 f99a 	bl	8003002 <HAL_TIM_Base_Start_IT>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3730      	adds	r7, #48	; 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	20004ad8 	.word	0x20004ad8
 8001ce8:	40010000 	.word	0x40010000

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d26:	f001 f9f7 	bl	8003118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20004ad8 	.word	0x20004ad8

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f005 fb52 	bl	800740c <__errno>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20020000 	.word	0x20020000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	20000090 	.word	0x20000090
 8001d9c:	20004b60 	.word	0x20004b60

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <SystemInit+0x28>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <SystemInit+0x28>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SystemInit+0x28>)
 8001db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dba:	609a      	str	r2, [r3, #8]
#endif
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dd2:	e003      	b.n	8001ddc <LoopCopyDataInit>

08001dd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dda:	3104      	adds	r1, #4

08001ddc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001de0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001de2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001de4:	d3f6      	bcc.n	8001dd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001de8:	e002      	b.n	8001df0 <LoopFillZerobss>

08001dea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dec:	f842 3b04 	str.w	r3, [r2], #4

08001df0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001df2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001df4:	d3f9      	bcc.n	8001dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001df6:	f7ff ffd3 	bl	8001da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f005 fb0d 	bl	8007418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfe:	f7ff fa6d 	bl	80012dc <main>
  bx  lr    
 8001e02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e08:	08007dbc 	.word	0x08007dbc
  ldr  r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e10:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001e14:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001e18:	20004b60 	.word	0x20004b60

08001e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_Init+0x40>)
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_Init+0x40>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_Init+0x40>)
 8001e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_Init+0x40>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f000 f8fa 	bl	8002042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fef4 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e54:	f7ff fd78 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20004b18 	.word	0x20004b18

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20004b18 	.word	0x20004b18

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_Delay+0x40>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ff4c 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206a:	f7ff ff61 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 800206e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7ff ffb1 	bl	8001fdc <NVIC_EncodePriority>
 800207a:	4602      	mov	r2, r0
 800207c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff80 	bl	8001f88 <__NVIC_SetPriority>
}
 8002088:	bf00      	nop
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff54 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e159      	b.n	800237c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f040 8148 	bne.w	8002376 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d00b      	beq.n	8002106 <HAL_GPIO_Init+0x5a>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d007      	beq.n	8002106 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020fa:	2b11      	cmp	r3, #17
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b12      	cmp	r3, #18
 8002104:	d130      	bne.n	8002168 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0201 	and.w	r2, r3, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0xfc>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b12      	cmp	r3, #18
 80021a6:	d123      	bne.n	80021f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a2 	beq.w	8002376 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_GPIO_Init+0x2e4>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_GPIO_Init+0x2e4>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_GPIO_Init+0x2e4>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224e:	4a51      	ldr	r2, [pc, #324]	; (8002394 <HAL_GPIO_Init+0x2e8>)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_GPIO_Init+0x2ec>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x202>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a47      	ldr	r2, [pc, #284]	; (800239c <HAL_GPIO_Init+0x2f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x1fe>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a46      	ldr	r2, [pc, #280]	; (80023a0 <HAL_GPIO_Init+0x2f4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x1fa>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x1f6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a44      	ldr	r2, [pc, #272]	; (80023a8 <HAL_GPIO_Init+0x2fc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x1f2>
 800229a:	2304      	movs	r3, #4
 800229c:	e008      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 800229e:	2307      	movs	r3, #7
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022ae:	2300      	movs	r3, #0
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c0:	4934      	ldr	r1, [pc, #208]	; (8002394 <HAL_GPIO_Init+0x2e8>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_GPIO_Init+0x300>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f2:	4a2e      	ldr	r2, [pc, #184]	; (80023ac <HAL_GPIO_Init+0x300>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_GPIO_Init+0x300>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_GPIO_Init+0x300>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_GPIO_Init+0x300>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002346:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_GPIO_Init+0x300>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_GPIO_Init+0x300>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_GPIO_Init+0x300>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3301      	adds	r3, #1
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	f67f aea2 	bls.w	80020c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002384:	bf00      	nop
 8002386:	3724      	adds	r7, #36	; 0x24
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e001      	b.n	80023d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e11f      	b.n	8002666 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff faac 	bl	8001998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002478:	f000 fd3e 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a7b      	ldr	r2, [pc, #492]	; (8002670 <HAL_I2C_Init+0x25c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d807      	bhi.n	8002498 <HAL_I2C_Init+0x84>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a7a      	ldr	r2, [pc, #488]	; (8002674 <HAL_I2C_Init+0x260>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e006      	b.n	80024a6 <HAL_I2C_Init+0x92>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a77      	ldr	r2, [pc, #476]	; (8002678 <HAL_I2C_Init+0x264>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0db      	b.n	8002666 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a72      	ldr	r2, [pc, #456]	; (800267c <HAL_I2C_Init+0x268>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0c9b      	lsrs	r3, r3, #18
 80024b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a64      	ldr	r2, [pc, #400]	; (8002670 <HAL_I2C_Init+0x25c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d802      	bhi.n	80024e8 <HAL_I2C_Init+0xd4>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	e009      	b.n	80024fc <HAL_I2C_Init+0xe8>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	4a63      	ldr	r2, [pc, #396]	; (8002680 <HAL_I2C_Init+0x26c>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	3301      	adds	r3, #1
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800250e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4956      	ldr	r1, [pc, #344]	; (8002670 <HAL_I2C_Init+0x25c>)
 8002518:	428b      	cmp	r3, r1
 800251a:	d80d      	bhi.n	8002538 <HAL_I2C_Init+0x124>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e59      	subs	r1, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fbb1 f3f3 	udiv	r3, r1, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b04      	cmp	r3, #4
 8002532:	bf38      	it	cc
 8002534:	2304      	movcc	r3, #4
 8002536:	e04f      	b.n	80025d8 <HAL_I2C_Init+0x1c4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <HAL_I2C_Init+0x150>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e012      	b.n	800258a <HAL_I2C_Init+0x176>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1e58      	subs	r0, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	0099      	lsls	r1, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	fbb0 f3f3 	udiv	r3, r0, r3
 800257a:	3301      	adds	r3, #1
 800257c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x17e>
 800258e:	2301      	movs	r3, #1
 8002590:	e022      	b.n	80025d8 <HAL_I2C_Init+0x1c4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10e      	bne.n	80025b8 <HAL_I2C_Init+0x1a4>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1e58      	subs	r0, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	440b      	add	r3, r1
 80025a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b6:	e00f      	b.n	80025d8 <HAL_I2C_Init+0x1c4>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	6809      	ldr	r1, [r1, #0]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6911      	ldr	r1, [r2, #16]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	430b      	orrs	r3, r1
 800261a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	000186a0 	.word	0x000186a0
 8002674:	001e847f 	.word	0x001e847f
 8002678:	003d08ff 	.word	0x003d08ff
 800267c:	431bde83 	.word	0x431bde83
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e25b      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d075      	beq.n	800278e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	4ba3      	ldr	r3, [pc, #652]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d00c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4ba0      	ldr	r3, [pc, #640]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d112      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b9d      	ldr	r3, [pc, #628]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4b99      	ldr	r3, [pc, #612]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d05b      	beq.n	800278c <HAL_RCC_OscConfig+0x108>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d157      	bne.n	800278c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e236      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x74>
 80026ea:	4b91      	ldr	r3, [pc, #580]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a90      	ldr	r2, [pc, #576]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b8b      	ldr	r3, [pc, #556]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a8a      	ldr	r2, [pc, #552]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b88      	ldr	r3, [pc, #544]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a87      	ldr	r2, [pc, #540]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 800271c:	4b84      	ldr	r3, [pc, #528]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a83      	ldr	r2, [pc, #524]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b81      	ldr	r3, [pc, #516]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a80      	ldr	r2, [pc, #512]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fba6 	bl	8001e8c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff fba2 	bl	8001e8c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1fb      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xc0>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fb92 	bl	8001e8c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fb8e 	bl	8001e8c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1e7      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0xe8>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1bb      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4952      	ldr	r1, [pc, #328]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_RCC_OscConfig+0x2b0>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7ff fb47 	bl	8001e8c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7ff fb43 	bl	8001e8c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e19c      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4940      	ldr	r1, [pc, #256]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <HAL_RCC_OscConfig+0x2b0>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fb26 	bl	8001e8c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff fb22 	bl	8001e8c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e17b      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d030      	beq.n	80028d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_RCC_OscConfig+0x2b4>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7ff fb06 	bl	8001e8c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7ff fb02 	bl	8001e8c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e15b      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x200>
 80028a2:	e015      	b.n	80028d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_OscConfig+0x2b4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7ff faef 	bl	8001e8c <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7ff faeb 	bl	8001e8c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e144      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a0 	beq.w	8002a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_OscConfig+0x2b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d121      	bne.n	800295e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCC_OscConfig+0x2b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_RCC_OscConfig+0x2b8>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7ff fab1 	bl	8001e8c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	e011      	b.n	8002952 <HAL_RCC_OscConfig+0x2ce>
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	42470000 	.word	0x42470000
 8002938:	42470e80 	.word	0x42470e80
 800293c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7ff faa4 	bl	8001e8c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0fd      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x4d4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d106      	bne.n	8002974 <HAL_RCC_OscConfig+0x2f0>
 8002966:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a7c      	ldr	r2, [pc, #496]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	e01c      	b.n	80029ae <HAL_RCC_OscConfig+0x32a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x312>
 800297c:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a76      	ldr	r2, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a73      	ldr	r2, [pc, #460]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	e00b      	b.n	80029ae <HAL_RCC_OscConfig+0x32a>
 8002996:	4b71      	ldr	r3, [pc, #452]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a70      	ldr	r2, [pc, #448]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a6d      	ldr	r2, [pc, #436]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d015      	beq.n	80029e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7ff fa69 	bl	8001e8c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7ff fa65 	bl	8001e8c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0bc      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCC_OscConfig+0x33a>
 80029e0:	e014      	b.n	8002a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fa53 	bl	8001e8c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7ff fa4f 	bl	8001e8c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0a6      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d105      	bne.n	8002a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a12:	4b52      	ldr	r3, [pc, #328]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8092 	beq.w	8002b4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d05c      	beq.n	8002aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d141      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3c:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7ff fa23 	bl	8001e8c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff fa1f 	bl	8001e8c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e078      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	019b      	lsls	r3, r3, #6
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	3b01      	subs	r3, #1
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	061b      	lsls	r3, r3, #24
 8002a8c:	4933      	ldr	r1, [pc, #204]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff f9f8 	bl	8001e8c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7ff f9f4 	bl	8001e8c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e04d      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x41c>
 8002abe:	e045      	b.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff f9e1 	bl	8001e8c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ace:	f7ff f9dd 	bl	8001e8c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e036      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x44a>
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e029      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d115      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	42470060 	.word	0x42470060

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0cc      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d90c      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d044      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e067      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4934      	ldr	r1, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7ff f91a 	bl	8001e8c <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7ff f916 	bl	8001e8c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20c      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	5cd3      	ldrb	r3, [r2, r3]
 8002cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe ff96 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08007d60 	.word	0x08007d60
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d007      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x32>
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d008      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x38>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 80b4 	bne.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d5e:	60bb      	str	r3, [r7, #8]
       break;
 8002d60:	e0b3      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d62:	4b5e      	ldr	r3, [pc, #376]	; (8002edc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d64:	60bb      	str	r3, [r7, #8]
      break;
 8002d66:	e0b0      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d68:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d72:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d04a      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	f04f 0400 	mov.w	r4, #0
 8002d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	ea03 0501 	and.w	r5, r3, r1
 8002d94:	ea04 0602 	and.w	r6, r4, r2
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4632      	mov	r2, r6
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	0154      	lsls	r4, r2, #5
 8002da6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002daa:	014b      	lsls	r3, r1, #5
 8002dac:	4619      	mov	r1, r3
 8002dae:	4622      	mov	r2, r4
 8002db0:	1b49      	subs	r1, r1, r5
 8002db2:	eb62 0206 	sbc.w	r2, r2, r6
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	0194      	lsls	r4, r2, #6
 8002dc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dc4:	018b      	lsls	r3, r1, #6
 8002dc6:	1a5b      	subs	r3, r3, r1
 8002dc8:	eb64 0402 	sbc.w	r4, r4, r2
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	00e2      	lsls	r2, r4, #3
 8002dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dda:	00d9      	lsls	r1, r3, #3
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4614      	mov	r4, r2
 8002de0:	195b      	adds	r3, r3, r5
 8002de2:	eb44 0406 	adc.w	r4, r4, r6
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	0262      	lsls	r2, r4, #9
 8002df0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002df4:	0259      	lsls	r1, r3, #9
 8002df6:	460b      	mov	r3, r1
 8002df8:	4614      	mov	r4, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f04f 0400 	mov.w	r4, #0
 8002e04:	461a      	mov	r2, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	f7fd fe38 	bl	8000a7c <__aeabi_uldivmod>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	460c      	mov	r4, r1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e049      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	f04f 0400 	mov.w	r4, #0
 8002e1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	ea03 0501 	and.w	r5, r3, r1
 8002e2a:	ea04 0602 	and.w	r6, r4, r2
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4632      	mov	r2, r6
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	0154      	lsls	r4, r2, #5
 8002e3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e40:	014b      	lsls	r3, r1, #5
 8002e42:	4619      	mov	r1, r3
 8002e44:	4622      	mov	r2, r4
 8002e46:	1b49      	subs	r1, r1, r5
 8002e48:	eb62 0206 	sbc.w	r2, r2, r6
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f04f 0400 	mov.w	r4, #0
 8002e54:	0194      	lsls	r4, r2, #6
 8002e56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e5a:	018b      	lsls	r3, r1, #6
 8002e5c:	1a5b      	subs	r3, r3, r1
 8002e5e:	eb64 0402 	sbc.w	r4, r4, r2
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	00e2      	lsls	r2, r4, #3
 8002e6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e70:	00d9      	lsls	r1, r3, #3
 8002e72:	460b      	mov	r3, r1
 8002e74:	4614      	mov	r4, r2
 8002e76:	195b      	adds	r3, r3, r5
 8002e78:	eb44 0406 	adc.w	r4, r4, r6
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	02a2      	lsls	r2, r4, #10
 8002e86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e8a:	0299      	lsls	r1, r3, #10
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4614      	mov	r4, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	4621      	mov	r1, r4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f04f 0400 	mov.w	r4, #0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	f7fd fded 	bl	8000a7c <__aeabi_uldivmod>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	60bb      	str	r3, [r7, #8]
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ec6:	60bb      	str	r3, [r7, #8]
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	68bb      	ldr	r3, [r7, #8]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002efc:	f7ff fff0 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f00:	4601      	mov	r1, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0a9b      	lsrs	r3, r3, #10
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	08007d70 	.word	0x08007d70

08002f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f24:	f7ff ffdc 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f28:	4601      	mov	r1, r0
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0b5b      	lsrs	r3, r3, #13
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4a03      	ldr	r2, [pc, #12]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08007d70 	.word	0x08007d70

08002f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	220f      	movs	r2, #15
 8002f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	08db      	lsrs	r3, r3, #3
 8002f82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <HAL_RCC_GetClockConfig+0x60>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 020f 	and.w	r2, r3, #15
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40023c00 	.word	0x40023c00

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e01d      	b.n	8002ffa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fd8e 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 fb42 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d007      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e01d      	b.n	8003098 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f815 	bl	80030a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f000 faf3 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2201      	movs	r2, #1
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fd7a 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a10      	ldr	r2, [pc, #64]	; (8003114 <HAL_TIM_PWM_Start+0x60>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d107      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d007      	beq.n	8003108 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000

08003118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0202 	mvn.w	r2, #2
 8003144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa6b 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa5d 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fa6e 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0204 	mvn.w	r2, #4
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa41 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fa33 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa44 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0208 	mvn.w	r2, #8
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2204      	movs	r2, #4
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa17 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa09 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fa1a 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b10      	cmp	r3, #16
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b10      	cmp	r3, #16
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2208      	movs	r2, #8
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9ed 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f9df 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9f0 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0201 	mvn.w	r2, #1
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fb3c 	bl	8001914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b80      	cmp	r3, #128	; 0x80
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fd1a 	bl	8003cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d107      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f9b5 	bl	800365e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b20      	cmp	r3, #32
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0220 	mvn.w	r2, #32
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fce4 	bl	8003ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800333e:	2302      	movs	r3, #2
 8003340:	e0b4      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x184>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	f200 809f 	bhi.w	8003498 <HAL_TIM_PWM_ConfigChannel+0x170>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003395 	.word	0x08003395
 8003364:	08003499 	.word	0x08003499
 8003368:	08003499 	.word	0x08003499
 800336c:	08003499 	.word	0x08003499
 8003370:	080033d5 	.word	0x080033d5
 8003374:	08003499 	.word	0x08003499
 8003378:	08003499 	.word	0x08003499
 800337c:	08003499 	.word	0x08003499
 8003380:	08003417 	.word	0x08003417
 8003384:	08003499 	.word	0x08003499
 8003388:	08003499 	.word	0x08003499
 800338c:	08003499 	.word	0x08003499
 8003390:	08003457 	.word	0x08003457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f9ea 	bl	8003774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0208 	orr.w	r2, r2, #8
 80033ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6999      	ldr	r1, [r3, #24]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	619a      	str	r2, [r3, #24]
      break;
 80033d2:	e062      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa30 	bl	8003840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6999      	ldr	r1, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	619a      	str	r2, [r3, #24]
      break;
 8003414:	e041      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fa7b 	bl	8003918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0208 	orr.w	r2, r2, #8
 8003430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0204 	bic.w	r2, r2, #4
 8003440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]
      break;
 8003454:	e021      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fac5 	bl	80039ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	61da      	str	r2, [r3, #28]
      break;
 8003496:	e000      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003498:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_TIM_ConfigClockSource+0x18>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0a6      	b.n	800361a <HAL_TIM_ConfigClockSource+0x166>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d067      	beq.n	80035d4 <HAL_TIM_ConfigClockSource+0x120>
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d80b      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x6c>
 8003508:	2b10      	cmp	r3, #16
 800350a:	d073      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0x140>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d802      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x62>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d06f      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003514:	e078      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003516:	2b20      	cmp	r3, #32
 8003518:	d06c      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0x140>
 800351a:	2b30      	cmp	r3, #48	; 0x30
 800351c:	d06a      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800351e:	e073      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003520:	2b70      	cmp	r3, #112	; 0x70
 8003522:	d00d      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0x8c>
 8003524:	2b70      	cmp	r3, #112	; 0x70
 8003526:	d804      	bhi.n	8003532 <HAL_TIM_ConfigClockSource+0x7e>
 8003528:	2b50      	cmp	r3, #80	; 0x50
 800352a:	d033      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0xe0>
 800352c:	2b60      	cmp	r3, #96	; 0x60
 800352e:	d041      	beq.n	80035b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003530:	e06a      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	d066      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x152>
 8003538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353c:	d017      	beq.n	800356e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800353e:	e063      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f000 fb16 	bl	8003b80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003562:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
      break;
 800356c:	e04c      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f000 faff 	bl	8003b80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003590:	609a      	str	r2, [r3, #8]
      break;
 8003592:	e039      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f000 fa73 	bl	8003a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2150      	movs	r1, #80	; 0x50
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 facc 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 80035b2:	e029      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f000 fa92 	bl	8003aea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2160      	movs	r1, #96	; 0x60
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fabc 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 80035d2:	e019      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f000 fa53 	bl	8003a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2140      	movs	r1, #64	; 0x40
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 faac 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 80035f2:	e009      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f000 faa3 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 8003604:	e000      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a34      	ldr	r2, [pc, #208]	; (8003758 <TIM_Base_SetConfig+0xe4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a31      	ldr	r2, [pc, #196]	; (800375c <TIM_Base_SetConfig+0xe8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a30      	ldr	r2, [pc, #192]	; (8003760 <TIM_Base_SetConfig+0xec>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <TIM_Base_SetConfig+0xf0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a25      	ldr	r2, [pc, #148]	; (8003758 <TIM_Base_SetConfig+0xe4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01b      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d017      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a22      	ldr	r2, [pc, #136]	; (800375c <TIM_Base_SetConfig+0xe8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a21      	ldr	r2, [pc, #132]	; (8003760 <TIM_Base_SetConfig+0xec>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <TIM_Base_SetConfig+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <TIM_Base_SetConfig+0xf4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <TIM_Base_SetConfig+0xf8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <TIM_Base_SetConfig+0xfc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <TIM_Base_SetConfig+0xe4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d103      	bne.n	8003744 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	615a      	str	r2, [r3, #20]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000
 800376c:	40014400 	.word	0x40014400
 8003770:	40014800 	.word	0x40014800

08003774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <TIM_OC1_SetConfig+0xc8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0308 	bic.w	r3, r3, #8
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <TIM_OC1_SetConfig+0xc8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d111      	bne.n	8003816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40010000 	.word	0x40010000

08003840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0210 	bic.w	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0320 	bic.w	r3, r3, #32
 800388a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <TIM_OC2_SetConfig+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10d      	bne.n	80038bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a15      	ldr	r2, [pc, #84]	; (8003914 <TIM_OC2_SetConfig+0xd4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d113      	bne.n	80038ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000

08003918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40010000 	.word	0x40010000

080039ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <TIM_OC4_SetConfig+0x9c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000

08003a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f023 030a 	bic.w	r3, r3, #10
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	621a      	str	r2, [r3, #32]
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b087      	sub	sp, #28
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0210 	bic.w	r2, r3, #16
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	031b      	lsls	r3, r3, #12
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f043 0307 	orr.w	r3, r3, #7
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	401a      	ands	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e050      	b.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c70:	d013      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40000c00 	.word	0x40000c00
 8003ce4:	40014000 	.word	0x40014000

08003ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e03f      	b.n	8003da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd ff38 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f90b 	bl	8003f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b088      	sub	sp, #32
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	f040 8083 	bne.w	8003ed2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Transmit+0x2e>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e07b      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Transmit+0x40>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e074      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2221      	movs	r2, #33	; 0x21
 8003dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e00:	f7fe f844 	bl	8001e8c <HAL_GetTick>
 8003e04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e1a:	e042      	b.n	8003ea2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e32:	d122      	bne.n	8003e7a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f84c 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e042      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	e017      	b.n	8003ea2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	e013      	b.n	8003ea2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f829 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e01f      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	60ba      	str	r2, [r7, #8]
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1b7      	bne.n	8003e1c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2140      	movs	r1, #64	; 0x40
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f810 	bl	8003edc <UART_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eec:	e02c      	b.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d028      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003efc:	f7fd ffc6 	bl	8001e8c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d21d      	bcs.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e00f      	b.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4013      	ands	r3, r2
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d0c3      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fb2:	f023 030c 	bic.w	r3, r3, #12
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fde:	f040 818b 	bne.w	80042f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4ac1      	ldr	r2, [pc, #772]	; (80042ec <UART_SetConfig+0x37c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d005      	beq.n	8003ff8 <UART_SetConfig+0x88>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4abf      	ldr	r2, [pc, #764]	; (80042f0 <UART_SetConfig+0x380>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	f040 80bd 	bne.w	8004172 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff8:	f7fe ff92 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 8003ffc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	461d      	mov	r5, r3
 8004002:	f04f 0600 	mov.w	r6, #0
 8004006:	46a8      	mov	r8, r5
 8004008:	46b1      	mov	r9, r6
 800400a:	eb18 0308 	adds.w	r3, r8, r8
 800400e:	eb49 0409 	adc.w	r4, r9, r9
 8004012:	4698      	mov	r8, r3
 8004014:	46a1      	mov	r9, r4
 8004016:	eb18 0805 	adds.w	r8, r8, r5
 800401a:	eb49 0906 	adc.w	r9, r9, r6
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800402a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800402e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004032:	4688      	mov	r8, r1
 8004034:	4691      	mov	r9, r2
 8004036:	eb18 0005 	adds.w	r0, r8, r5
 800403a:	eb49 0106 	adc.w	r1, r9, r6
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	461d      	mov	r5, r3
 8004044:	f04f 0600 	mov.w	r6, #0
 8004048:	196b      	adds	r3, r5, r5
 800404a:	eb46 0406 	adc.w	r4, r6, r6
 800404e:	461a      	mov	r2, r3
 8004050:	4623      	mov	r3, r4
 8004052:	f7fc fd13 	bl	8000a7c <__aeabi_uldivmod>
 8004056:	4603      	mov	r3, r0
 8004058:	460c      	mov	r4, r1
 800405a:	461a      	mov	r2, r3
 800405c:	4ba5      	ldr	r3, [pc, #660]	; (80042f4 <UART_SetConfig+0x384>)
 800405e:	fba3 2302 	umull	r2, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	461d      	mov	r5, r3
 800406c:	f04f 0600 	mov.w	r6, #0
 8004070:	46a9      	mov	r9, r5
 8004072:	46b2      	mov	sl, r6
 8004074:	eb19 0309 	adds.w	r3, r9, r9
 8004078:	eb4a 040a 	adc.w	r4, sl, sl
 800407c:	4699      	mov	r9, r3
 800407e:	46a2      	mov	sl, r4
 8004080:	eb19 0905 	adds.w	r9, r9, r5
 8004084:	eb4a 0a06 	adc.w	sl, sl, r6
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004094:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004098:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800409c:	4689      	mov	r9, r1
 800409e:	4692      	mov	sl, r2
 80040a0:	eb19 0005 	adds.w	r0, r9, r5
 80040a4:	eb4a 0106 	adc.w	r1, sl, r6
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	461d      	mov	r5, r3
 80040ae:	f04f 0600 	mov.w	r6, #0
 80040b2:	196b      	adds	r3, r5, r5
 80040b4:	eb46 0406 	adc.w	r4, r6, r6
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	f7fc fcde 	bl	8000a7c <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <UART_SetConfig+0x384>)
 80040c8:	fba3 1302 	umull	r1, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	2164      	movs	r1, #100	; 0x64
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	3332      	adds	r3, #50	; 0x32
 80040da:	4a86      	ldr	r2, [pc, #536]	; (80042f4 <UART_SetConfig+0x384>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e8:	4498      	add	r8, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	461d      	mov	r5, r3
 80040ee:	f04f 0600 	mov.w	r6, #0
 80040f2:	46a9      	mov	r9, r5
 80040f4:	46b2      	mov	sl, r6
 80040f6:	eb19 0309 	adds.w	r3, r9, r9
 80040fa:	eb4a 040a 	adc.w	r4, sl, sl
 80040fe:	4699      	mov	r9, r3
 8004100:	46a2      	mov	sl, r4
 8004102:	eb19 0905 	adds.w	r9, r9, r5
 8004106:	eb4a 0a06 	adc.w	sl, sl, r6
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004116:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800411a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800411e:	4689      	mov	r9, r1
 8004120:	4692      	mov	sl, r2
 8004122:	eb19 0005 	adds.w	r0, r9, r5
 8004126:	eb4a 0106 	adc.w	r1, sl, r6
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	461d      	mov	r5, r3
 8004130:	f04f 0600 	mov.w	r6, #0
 8004134:	196b      	adds	r3, r5, r5
 8004136:	eb46 0406 	adc.w	r4, r6, r6
 800413a:	461a      	mov	r2, r3
 800413c:	4623      	mov	r3, r4
 800413e:	f7fc fc9d 	bl	8000a7c <__aeabi_uldivmod>
 8004142:	4603      	mov	r3, r0
 8004144:	460c      	mov	r4, r1
 8004146:	461a      	mov	r2, r3
 8004148:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <UART_SetConfig+0x384>)
 800414a:	fba3 1302 	umull	r1, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2164      	movs	r1, #100	; 0x64
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a65      	ldr	r2, [pc, #404]	; (80042f4 <UART_SetConfig+0x384>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 0207 	and.w	r2, r3, #7
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4442      	add	r2, r8
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	e26f      	b.n	8004652 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004172:	f7fe fec1 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 8004176:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	461d      	mov	r5, r3
 800417c:	f04f 0600 	mov.w	r6, #0
 8004180:	46a8      	mov	r8, r5
 8004182:	46b1      	mov	r9, r6
 8004184:	eb18 0308 	adds.w	r3, r8, r8
 8004188:	eb49 0409 	adc.w	r4, r9, r9
 800418c:	4698      	mov	r8, r3
 800418e:	46a1      	mov	r9, r4
 8004190:	eb18 0805 	adds.w	r8, r8, r5
 8004194:	eb49 0906 	adc.w	r9, r9, r6
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041ac:	4688      	mov	r8, r1
 80041ae:	4691      	mov	r9, r2
 80041b0:	eb18 0005 	adds.w	r0, r8, r5
 80041b4:	eb49 0106 	adc.w	r1, r9, r6
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	461d      	mov	r5, r3
 80041be:	f04f 0600 	mov.w	r6, #0
 80041c2:	196b      	adds	r3, r5, r5
 80041c4:	eb46 0406 	adc.w	r4, r6, r6
 80041c8:	461a      	mov	r2, r3
 80041ca:	4623      	mov	r3, r4
 80041cc:	f7fc fc56 	bl	8000a7c <__aeabi_uldivmod>
 80041d0:	4603      	mov	r3, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	461a      	mov	r2, r3
 80041d6:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <UART_SetConfig+0x384>)
 80041d8:	fba3 2302 	umull	r2, r3, r3, r2
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	461d      	mov	r5, r3
 80041e6:	f04f 0600 	mov.w	r6, #0
 80041ea:	46a9      	mov	r9, r5
 80041ec:	46b2      	mov	sl, r6
 80041ee:	eb19 0309 	adds.w	r3, r9, r9
 80041f2:	eb4a 040a 	adc.w	r4, sl, sl
 80041f6:	4699      	mov	r9, r3
 80041f8:	46a2      	mov	sl, r4
 80041fa:	eb19 0905 	adds.w	r9, r9, r5
 80041fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004216:	4689      	mov	r9, r1
 8004218:	4692      	mov	sl, r2
 800421a:	eb19 0005 	adds.w	r0, r9, r5
 800421e:	eb4a 0106 	adc.w	r1, sl, r6
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	461d      	mov	r5, r3
 8004228:	f04f 0600 	mov.w	r6, #0
 800422c:	196b      	adds	r3, r5, r5
 800422e:	eb46 0406 	adc.w	r4, r6, r6
 8004232:	461a      	mov	r2, r3
 8004234:	4623      	mov	r3, r4
 8004236:	f7fc fc21 	bl	8000a7c <__aeabi_uldivmod>
 800423a:	4603      	mov	r3, r0
 800423c:	460c      	mov	r4, r1
 800423e:	461a      	mov	r2, r3
 8004240:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <UART_SetConfig+0x384>)
 8004242:	fba3 1302 	umull	r1, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2164      	movs	r1, #100	; 0x64
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	3332      	adds	r3, #50	; 0x32
 8004254:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <UART_SetConfig+0x384>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004262:	4498      	add	r8, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	461d      	mov	r5, r3
 8004268:	f04f 0600 	mov.w	r6, #0
 800426c:	46a9      	mov	r9, r5
 800426e:	46b2      	mov	sl, r6
 8004270:	eb19 0309 	adds.w	r3, r9, r9
 8004274:	eb4a 040a 	adc.w	r4, sl, sl
 8004278:	4699      	mov	r9, r3
 800427a:	46a2      	mov	sl, r4
 800427c:	eb19 0905 	adds.w	r9, r9, r5
 8004280:	eb4a 0a06 	adc.w	sl, sl, r6
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004294:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004298:	4689      	mov	r9, r1
 800429a:	4692      	mov	sl, r2
 800429c:	eb19 0005 	adds.w	r0, r9, r5
 80042a0:	eb4a 0106 	adc.w	r1, sl, r6
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	461d      	mov	r5, r3
 80042aa:	f04f 0600 	mov.w	r6, #0
 80042ae:	196b      	adds	r3, r5, r5
 80042b0:	eb46 0406 	adc.w	r4, r6, r6
 80042b4:	461a      	mov	r2, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	f7fc fbe0 	bl	8000a7c <__aeabi_uldivmod>
 80042bc:	4603      	mov	r3, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <UART_SetConfig+0x384>)
 80042c4:	fba3 1302 	umull	r1, r3, r3, r2
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	2164      	movs	r1, #100	; 0x64
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	3332      	adds	r3, #50	; 0x32
 80042d6:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <UART_SetConfig+0x384>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	f003 0207 	and.w	r2, r3, #7
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4442      	add	r2, r8
 80042e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80042ea:	e1b2      	b.n	8004652 <UART_SetConfig+0x6e2>
 80042ec:	40011000 	.word	0x40011000
 80042f0:	40011400 	.word	0x40011400
 80042f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4ad7      	ldr	r2, [pc, #860]	; (800465c <UART_SetConfig+0x6ec>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d005      	beq.n	800430e <UART_SetConfig+0x39e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4ad6      	ldr	r2, [pc, #856]	; (8004660 <UART_SetConfig+0x6f0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	f040 80d1 	bne.w	80044b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800430e:	f7fe fe07 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 8004312:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	469a      	mov	sl, r3
 8004318:	f04f 0b00 	mov.w	fp, #0
 800431c:	46d0      	mov	r8, sl
 800431e:	46d9      	mov	r9, fp
 8004320:	eb18 0308 	adds.w	r3, r8, r8
 8004324:	eb49 0409 	adc.w	r4, r9, r9
 8004328:	4698      	mov	r8, r3
 800432a:	46a1      	mov	r9, r4
 800432c:	eb18 080a 	adds.w	r8, r8, sl
 8004330:	eb49 090b 	adc.w	r9, r9, fp
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004340:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004344:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004348:	4688      	mov	r8, r1
 800434a:	4691      	mov	r9, r2
 800434c:	eb1a 0508 	adds.w	r5, sl, r8
 8004350:	eb4b 0609 	adc.w	r6, fp, r9
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4619      	mov	r1, r3
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	f04f 0400 	mov.w	r4, #0
 8004366:	0094      	lsls	r4, r2, #2
 8004368:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800436c:	008b      	lsls	r3, r1, #2
 800436e:	461a      	mov	r2, r3
 8004370:	4623      	mov	r3, r4
 8004372:	4628      	mov	r0, r5
 8004374:	4631      	mov	r1, r6
 8004376:	f7fc fb81 	bl	8000a7c <__aeabi_uldivmod>
 800437a:	4603      	mov	r3, r0
 800437c:	460c      	mov	r4, r1
 800437e:	461a      	mov	r2, r3
 8004380:	4bb8      	ldr	r3, [pc, #736]	; (8004664 <UART_SetConfig+0x6f4>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	469b      	mov	fp, r3
 8004390:	f04f 0c00 	mov.w	ip, #0
 8004394:	46d9      	mov	r9, fp
 8004396:	46e2      	mov	sl, ip
 8004398:	eb19 0309 	adds.w	r3, r9, r9
 800439c:	eb4a 040a 	adc.w	r4, sl, sl
 80043a0:	4699      	mov	r9, r3
 80043a2:	46a2      	mov	sl, r4
 80043a4:	eb19 090b 	adds.w	r9, r9, fp
 80043a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c0:	4689      	mov	r9, r1
 80043c2:	4692      	mov	sl, r2
 80043c4:	eb1b 0509 	adds.w	r5, fp, r9
 80043c8:	eb4c 060a 	adc.w	r6, ip, sl
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4619      	mov	r1, r3
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	f04f 0400 	mov.w	r4, #0
 80043de:	0094      	lsls	r4, r2, #2
 80043e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	461a      	mov	r2, r3
 80043e8:	4623      	mov	r3, r4
 80043ea:	4628      	mov	r0, r5
 80043ec:	4631      	mov	r1, r6
 80043ee:	f7fc fb45 	bl	8000a7c <__aeabi_uldivmod>
 80043f2:	4603      	mov	r3, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b9a      	ldr	r3, [pc, #616]	; (8004664 <UART_SetConfig+0x6f4>)
 80043fa:	fba3 1302 	umull	r1, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2164      	movs	r1, #100	; 0x64
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	; 0x32
 800440c:	4a95      	ldr	r2, [pc, #596]	; (8004664 <UART_SetConfig+0x6f4>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004418:	4498      	add	r8, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	469b      	mov	fp, r3
 800441e:	f04f 0c00 	mov.w	ip, #0
 8004422:	46d9      	mov	r9, fp
 8004424:	46e2      	mov	sl, ip
 8004426:	eb19 0309 	adds.w	r3, r9, r9
 800442a:	eb4a 040a 	adc.w	r4, sl, sl
 800442e:	4699      	mov	r9, r3
 8004430:	46a2      	mov	sl, r4
 8004432:	eb19 090b 	adds.w	r9, r9, fp
 8004436:	eb4a 0a0c 	adc.w	sl, sl, ip
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004446:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800444a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800444e:	4689      	mov	r9, r1
 8004450:	4692      	mov	sl, r2
 8004452:	eb1b 0509 	adds.w	r5, fp, r9
 8004456:	eb4c 060a 	adc.w	r6, ip, sl
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4619      	mov	r1, r3
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	f04f 0400 	mov.w	r4, #0
 800446c:	0094      	lsls	r4, r2, #2
 800446e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004472:	008b      	lsls	r3, r1, #2
 8004474:	461a      	mov	r2, r3
 8004476:	4623      	mov	r3, r4
 8004478:	4628      	mov	r0, r5
 800447a:	4631      	mov	r1, r6
 800447c:	f7fc fafe 	bl	8000a7c <__aeabi_uldivmod>
 8004480:	4603      	mov	r3, r0
 8004482:	460c      	mov	r4, r1
 8004484:	461a      	mov	r2, r3
 8004486:	4b77      	ldr	r3, [pc, #476]	; (8004664 <UART_SetConfig+0x6f4>)
 8004488:	fba3 1302 	umull	r1, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	2164      	movs	r1, #100	; 0x64
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	3332      	adds	r3, #50	; 0x32
 800449a:	4a72      	ldr	r2, [pc, #456]	; (8004664 <UART_SetConfig+0x6f4>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f003 020f 	and.w	r2, r3, #15
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4442      	add	r2, r8
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	e0d0      	b.n	8004652 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b0:	f7fe fd22 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80044b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	469a      	mov	sl, r3
 80044ba:	f04f 0b00 	mov.w	fp, #0
 80044be:	46d0      	mov	r8, sl
 80044c0:	46d9      	mov	r9, fp
 80044c2:	eb18 0308 	adds.w	r3, r8, r8
 80044c6:	eb49 0409 	adc.w	r4, r9, r9
 80044ca:	4698      	mov	r8, r3
 80044cc:	46a1      	mov	r9, r4
 80044ce:	eb18 080a 	adds.w	r8, r8, sl
 80044d2:	eb49 090b 	adc.w	r9, r9, fp
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044ea:	4688      	mov	r8, r1
 80044ec:	4691      	mov	r9, r2
 80044ee:	eb1a 0508 	adds.w	r5, sl, r8
 80044f2:	eb4b 0609 	adc.w	r6, fp, r9
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4619      	mov	r1, r3
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	f04f 0400 	mov.w	r4, #0
 8004508:	0094      	lsls	r4, r2, #2
 800450a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800450e:	008b      	lsls	r3, r1, #2
 8004510:	461a      	mov	r2, r3
 8004512:	4623      	mov	r3, r4
 8004514:	4628      	mov	r0, r5
 8004516:	4631      	mov	r1, r6
 8004518:	f7fc fab0 	bl	8000a7c <__aeabi_uldivmod>
 800451c:	4603      	mov	r3, r0
 800451e:	460c      	mov	r4, r1
 8004520:	461a      	mov	r2, r3
 8004522:	4b50      	ldr	r3, [pc, #320]	; (8004664 <UART_SetConfig+0x6f4>)
 8004524:	fba3 2302 	umull	r2, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	469b      	mov	fp, r3
 8004532:	f04f 0c00 	mov.w	ip, #0
 8004536:	46d9      	mov	r9, fp
 8004538:	46e2      	mov	sl, ip
 800453a:	eb19 0309 	adds.w	r3, r9, r9
 800453e:	eb4a 040a 	adc.w	r4, sl, sl
 8004542:	4699      	mov	r9, r3
 8004544:	46a2      	mov	sl, r4
 8004546:	eb19 090b 	adds.w	r9, r9, fp
 800454a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800454e:	f04f 0100 	mov.w	r1, #0
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800455e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004562:	4689      	mov	r9, r1
 8004564:	4692      	mov	sl, r2
 8004566:	eb1b 0509 	adds.w	r5, fp, r9
 800456a:	eb4c 060a 	adc.w	r6, ip, sl
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4619      	mov	r1, r3
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	f04f 0400 	mov.w	r4, #0
 8004580:	0094      	lsls	r4, r2, #2
 8004582:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004586:	008b      	lsls	r3, r1, #2
 8004588:	461a      	mov	r2, r3
 800458a:	4623      	mov	r3, r4
 800458c:	4628      	mov	r0, r5
 800458e:	4631      	mov	r1, r6
 8004590:	f7fc fa74 	bl	8000a7c <__aeabi_uldivmod>
 8004594:	4603      	mov	r3, r0
 8004596:	460c      	mov	r4, r1
 8004598:	461a      	mov	r2, r3
 800459a:	4b32      	ldr	r3, [pc, #200]	; (8004664 <UART_SetConfig+0x6f4>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	; 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	3332      	adds	r3, #50	; 0x32
 80045ae:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <UART_SetConfig+0x6f4>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ba:	4498      	add	r8, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	469b      	mov	fp, r3
 80045c0:	f04f 0c00 	mov.w	ip, #0
 80045c4:	46d9      	mov	r9, fp
 80045c6:	46e2      	mov	sl, ip
 80045c8:	eb19 0309 	adds.w	r3, r9, r9
 80045cc:	eb4a 040a 	adc.w	r4, sl, sl
 80045d0:	4699      	mov	r9, r3
 80045d2:	46a2      	mov	sl, r4
 80045d4:	eb19 090b 	adds.w	r9, r9, fp
 80045d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045f0:	4689      	mov	r9, r1
 80045f2:	4692      	mov	sl, r2
 80045f4:	eb1b 0509 	adds.w	r5, fp, r9
 80045f8:	eb4c 060a 	adc.w	r6, ip, sl
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4619      	mov	r1, r3
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	0094      	lsls	r4, r2, #2
 8004610:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004614:	008b      	lsls	r3, r1, #2
 8004616:	461a      	mov	r2, r3
 8004618:	4623      	mov	r3, r4
 800461a:	4628      	mov	r0, r5
 800461c:	4631      	mov	r1, r6
 800461e:	f7fc fa2d 	bl	8000a7c <__aeabi_uldivmod>
 8004622:	4603      	mov	r3, r0
 8004624:	460c      	mov	r4, r1
 8004626:	461a      	mov	r2, r3
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <UART_SetConfig+0x6f4>)
 800462a:	fba3 1302 	umull	r1, r3, r3, r2
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2164      	movs	r1, #100	; 0x64
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	3332      	adds	r3, #50	; 0x32
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <UART_SetConfig+0x6f4>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	f003 020f 	and.w	r2, r3, #15
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4442      	add	r2, r8
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	e7ff      	b.n	8004652 <UART_SetConfig+0x6e2>
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465c:	40011000 	.word	0x40011000
 8004660:	40011400 	.word	0x40011400
 8004664:	51eb851f 	.word	0x51eb851f

08004668 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467e:	f3ef 8305 	mrs	r3, IPSR
 8004682:	60bb      	str	r3, [r7, #8]
  return(result);
 8004684:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	607b      	str	r3, [r7, #4]
  return(result);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004696:	f3ef 8311 	mrs	r3, BASEPRI
 800469a:	603b      	str	r3, [r7, #0]
  return(result);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <osKernelInitialize+0x3a>
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <osKernelInitialize+0x64>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d103      	bne.n	80046b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046aa:	f06f 0305 	mvn.w	r3, #5
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e00c      	b.n	80046cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <osKernelInitialize+0x64>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <osKernelInitialize+0x64>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e002      	b.n	80046cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046cc:	68fb      	ldr	r3, [r7, #12]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000094 	.word	0x20000094

080046e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e6:	f3ef 8305 	mrs	r3, IPSR
 80046ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	607b      	str	r3, [r7, #4]
  return(result);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004702:	603b      	str	r3, [r7, #0]
  return(result);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <osKernelStart+0x3a>
 800470a:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <osKernelStart+0x68>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d103      	bne.n	800471a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004712:	f06f 0305 	mvn.w	r3, #5
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e010      	b.n	800473c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <osKernelStart+0x68>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d109      	bne.n	8004736 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004722:	f7ff ffa1 	bl	8004668 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <osKernelStart+0x68>)
 8004728:	2202      	movs	r2, #2
 800472a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800472c:	f001 fa00 	bl	8005b30 <vTaskStartScheduler>
      stat = osOK;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e002      	b.n	800473c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000094 	.word	0x20000094

0800474c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b090      	sub	sp, #64	; 0x40
 8004750:	af04      	add	r7, sp, #16
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800475c:	f3ef 8305 	mrs	r3, IPSR
 8004760:	61fb      	str	r3, [r7, #28]
  return(result);
 8004762:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 808f 	bne.w	8004888 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476a:	f3ef 8310 	mrs	r3, PRIMASK
 800476e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004776:	f3ef 8311 	mrs	r3, BASEPRI
 800477a:	617b      	str	r3, [r7, #20]
  return(result);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <osThreadNew+0x3e>
 8004782:	4b44      	ldr	r3, [pc, #272]	; (8004894 <osThreadNew+0x148>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d07e      	beq.n	8004888 <osThreadNew+0x13c>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d07b      	beq.n	8004888 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004794:	2318      	movs	r3, #24
 8004796:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d045      	beq.n	8004834 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <osThreadNew+0x6a>
        name = attr->name;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <osThreadNew+0x90>
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	2b38      	cmp	r3, #56	; 0x38
 80047ce:	d805      	bhi.n	80047dc <osThreadNew+0x90>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <osThreadNew+0x94>
        return (NULL);
 80047dc:	2300      	movs	r3, #0
 80047de:	e054      	b.n	800488a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00e      	beq.n	8004816 <osThreadNew+0xca>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b5b      	cmp	r3, #91	; 0x5b
 80047fe:	d90a      	bls.n	8004816 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004804:	2b00      	cmp	r3, #0
 8004806:	d006      	beq.n	8004816 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <osThreadNew+0xca>
        mem = 1;
 8004810:	2301      	movs	r3, #1
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	e010      	b.n	8004838 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10c      	bne.n	8004838 <osThreadNew+0xec>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <osThreadNew+0xec>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <osThreadNew+0xec>
          mem = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	e001      	b.n	8004838 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d110      	bne.n	8004860 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004846:	9202      	str	r2, [sp, #8]
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 ff99 	bl	800578c <xTaskCreateStatic>
 800485a:	4603      	mov	r3, r0
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	e013      	b.n	8004888 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d110      	bne.n	8004888 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	b29a      	uxth	r2, r3
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 ffe1 	bl	8005840 <xTaskCreate>
 800487e:	4603      	mov	r3, r0
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <osThreadNew+0x13c>
          hTask = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004888:	693b      	ldr	r3, [r7, #16]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3730      	adds	r7, #48	; 0x30
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000094 	.word	0x20000094

08004898 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a0:	f3ef 8305 	mrs	r3, IPSR
 80048a4:	613b      	str	r3, [r7, #16]
  return(result);
 80048a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10f      	bne.n	80048cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ac:	f3ef 8310 	mrs	r3, PRIMASK
 80048b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048b8:	f3ef 8311 	mrs	r3, BASEPRI
 80048bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <osDelay+0x3c>
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <osDelay+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d103      	bne.n	80048d4 <osDelay+0x3c>
    stat = osErrorISR;
 80048cc:	f06f 0305 	mvn.w	r3, #5
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e007      	b.n	80048e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 f8f2 	bl	8005ac8 <vTaskDelay>
    }
  }

  return (stat);
 80048e4:	697b      	ldr	r3, [r7, #20]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000094 	.word	0x20000094

080048f4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004904:	f3ef 8305 	mrs	r3, IPSR
 8004908:	61bb      	str	r3, [r7, #24]
  return(result);
 800490a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8087 	bne.w	8004a20 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004912:	f3ef 8310 	mrs	r3, PRIMASK
 8004916:	617b      	str	r3, [r7, #20]
  return(result);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800491e:	f3ef 8311 	mrs	r3, BASEPRI
 8004922:	613b      	str	r3, [r7, #16]
  return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <osSemaphoreNew+0x3e>
 800492a:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <osSemaphoreNew+0x138>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d076      	beq.n	8004a20 <osSemaphoreNew+0x12c>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d073      	beq.n	8004a20 <osSemaphoreNew+0x12c>
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	429a      	cmp	r2, r3
 800493e:	d86f      	bhi.n	8004a20 <osSemaphoreNew+0x12c>
    mem = -1;
 8004940:	f04f 33ff 	mov.w	r3, #4294967295
 8004944:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d015      	beq.n	8004978 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <osSemaphoreNew+0x6e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b4f      	cmp	r3, #79	; 0x4f
 800495a:	d902      	bls.n	8004962 <osSemaphoreNew+0x6e>
        mem = 1;
 800495c:	2301      	movs	r3, #1
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	e00c      	b.n	800497c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <osSemaphoreNew+0x88>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <osSemaphoreNew+0x88>
          mem = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	e001      	b.n	800497c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d04d      	beq.n	8004a20 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d129      	bne.n	80049de <osSemaphoreNew+0xea>
        if (mem == 1) {
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10b      	bne.n	80049a8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	2303      	movs	r3, #3
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	2100      	movs	r1, #0
 800499e:	2001      	movs	r0, #1
 80049a0:	f000 f996 	bl	8004cd0 <xQueueGenericCreateStatic>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24
 80049a6:	e005      	b.n	80049b4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80049a8:	2203      	movs	r2, #3
 80049aa:	2100      	movs	r1, #0
 80049ac:	2001      	movs	r0, #1
 80049ae:	f000 fa02 	bl	8004db6 <xQueueGenericCreate>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d022      	beq.n	8004a00 <osSemaphoreNew+0x10c>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01f      	beq.n	8004a00 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80049c0:	2300      	movs	r3, #0
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049c8:	f000 fabe 	bl	8004f48 <xQueueGenericSend>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d016      	beq.n	8004a00 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80049d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049d4:	f000 fd22 	bl	800541c <vQueueDelete>
            hSemaphore = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
 80049dc:	e010      	b.n	8004a00 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d108      	bne.n	80049f6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fa44 	bl	8004e7a <xQueueCreateCountingSemaphoreStatic>
 80049f2:	6278      	str	r0, [r7, #36]	; 0x24
 80049f4:	e004      	b.n	8004a00 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fa73 	bl	8004ee4 <xQueueCreateCountingSemaphore>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <osSemaphoreNew+0x120>
          name = attr->name;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	e001      	b.n	8004a18 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a18:	69f9      	ldr	r1, [r7, #28]
 8004a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a1c:	f000 fe30 	bl	8005680 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3728      	adds	r7, #40	; 0x28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000094 	.word	0x20000094

08004a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8004a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <vApplicationGetIdleTaskMemory+0x30>)
 8004a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2280      	movs	r2, #128	; 0x80
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000098 	.word	0x20000098
 8004a60:	200000f4 	.word	0x200000f4

08004a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <vApplicationGetTimerTaskMemory+0x30>)
 8004a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	200002f4 	.word	0x200002f4
 8004a94:	20000350 	.word	0x20000350

08004a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0208 	add.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f103 0208 	add.w	r2, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f103 0208 	add.w	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d103      	bne.n	8004b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e00c      	b.n	8004b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e002      	b.n	8004b68 <vListInsert+0x2e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d2f6      	bcs.n	8004b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6892      	ldr	r2, [r2, #8]
 8004bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6852      	ldr	r2, [r2, #4]
 8004bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d103      	bne.n	8004be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	e7fe      	b.n	8004c26 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004c28:	f002 f900 	bl	8006e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	441a      	add	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	22ff      	movs	r2, #255	; 0xff
 8004c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	22ff      	movs	r2, #255	; 0xff
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d114      	bne.n	8004ca8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01a      	beq.n	8004cbc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3310      	adds	r3, #16
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 f9d0 	bl	8006030 <xTaskRemoveFromEventList>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <xQueueGenericReset+0xcc>)
 8004c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	e009      	b.n	8004cbc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3310      	adds	r3, #16
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fef3 	bl	8004a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3324      	adds	r3, #36	; 0x24
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff feee 	bl	8004a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cbc:	f002 f8e4 	bl	8006e88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cc0:	2301      	movs	r3, #1
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08e      	sub	sp, #56	; 0x38
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <xQueueGenericCreateStatic+0x28>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <xQueueGenericCreateStatic+0x42>
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	e7fe      	b.n	8004d10 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <xQueueGenericCreateStatic+0x4e>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <xQueueGenericCreateStatic+0x52>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <xQueueGenericCreateStatic+0x54>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <xQueueGenericCreateStatic+0x6c>
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	e7fe      	b.n	8004d3a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <xQueueGenericCreateStatic+0x78>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <xQueueGenericCreateStatic+0x7c>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <xQueueGenericCreateStatic+0x7e>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <xQueueGenericCreateStatic+0x96>
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e7fe      	b.n	8004d64 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d66:	2350      	movs	r3, #80	; 0x50
 8004d68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b50      	cmp	r3, #80	; 0x50
 8004d6e:	d009      	beq.n	8004d84 <xQueueGenericCreateStatic+0xb4>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e7fe      	b.n	8004d82 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00d      	beq.n	8004dac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f844 	bl	8004e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3730      	adds	r7, #48	; 0x30
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b08a      	sub	sp, #40	; 0x28
 8004dba:	af02      	add	r7, sp, #8
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <xQueueGenericCreate+0x28>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	e004      	b.n	8004df4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3350      	adds	r3, #80	; 0x50
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f002 f931 	bl	8007060 <pvPortMalloc>
 8004dfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d011      	beq.n	8004e2a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3350      	adds	r3, #80	; 0x50
 8004e0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e18:	79fa      	ldrb	r2, [r7, #7]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f805 	bl	8004e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e002      	b.n	8004e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e62:	2101      	movs	r1, #1
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f7ff fecb 	bl	8004c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08a      	sub	sp, #40	; 0x28
 8004e7e:	af02      	add	r7, sp, #8
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <xQueueCreateCountingSemaphoreStatic+0x26>
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e7fe      	b.n	8004e9e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d909      	bls.n	8004ebc <xQueueCreateCountingSemaphoreStatic+0x42>
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e7fe      	b.n	8004eba <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff ff02 	bl	8004cd0 <xQueueGenericCreateStatic>
 8004ecc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004eda:	69fb      	ldr	r3, [r7, #28]
	}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <xQueueCreateCountingSemaphore+0x24>
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	e7fe      	b.n	8004f06 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d909      	bls.n	8004f24 <xQueueCreateCountingSemaphore+0x40>
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e7fe      	b.n	8004f22 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f24:	2202      	movs	r2, #2
 8004f26:	2100      	movs	r1, #0
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ff44 	bl	8004db6 <xQueueGenericCreate>
 8004f2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f3c:	697b      	ldr	r3, [r7, #20]
	}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08e      	sub	sp, #56	; 0x38
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f56:	2300      	movs	r3, #0
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <xQueueGenericSend+0x30>
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f76:	e7fe      	b.n	8004f76 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <xQueueGenericSend+0x3e>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <xQueueGenericSend+0x42>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueGenericSend+0x44>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <xQueueGenericSend+0x5c>
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa2:	e7fe      	b.n	8004fa2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d103      	bne.n	8004fb2 <xQueueGenericSend+0x6a>
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <xQueueGenericSend+0x6e>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <xQueueGenericSend+0x70>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <xQueueGenericSend+0x88>
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	e7fe      	b.n	8004fce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fd0:	f001 f9e4 	bl	800639c <xTaskGetSchedulerState>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <xQueueGenericSend+0x98>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <xQueueGenericSend+0x9c>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <xQueueGenericSend+0x9e>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <xQueueGenericSend+0xb6>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ffe:	f001 ff15 	bl	8006e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <xQueueGenericSend+0xcc>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d129      	bne.n	8005068 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501a:	f000 fa21 	bl	8005460 <prvCopyDataToQueue>
 800501e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	3324      	adds	r3, #36	; 0x24
 800502c:	4618      	mov	r0, r3
 800502e:	f000 ffff 	bl	8006030 <xTaskRemoveFromEventList>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005038:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <xQueueGenericSend+0x1f0>)
 800503a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	e00a      	b.n	8005060 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005050:	4b39      	ldr	r3, [pc, #228]	; (8005138 <xQueueGenericSend+0x1f0>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005060:	f001 ff12 	bl	8006e88 <vPortExitCritical>
				return pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	e063      	b.n	8005130 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800506e:	f001 ff0b 	bl	8006e88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005072:	2300      	movs	r3, #0
 8005074:	e05c      	b.n	8005130 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f001 f837 	bl	80060f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800508a:	f001 fefd 	bl	8006e88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800508e:	f000 fdb3 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005092:	f001 fecb 	bl	8006e2c <vPortEnterCritical>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509c:	b25b      	sxtb	r3, r3
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d103      	bne.n	80050ac <xQueueGenericSend+0x164>
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b2:	b25b      	sxtb	r3, r3
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d103      	bne.n	80050c2 <xQueueGenericSend+0x17a>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c2:	f001 fee1 	bl	8006e88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050c6:	1d3a      	adds	r2, r7, #4
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 f826 	bl	8006120 <xTaskCheckForTimeOut>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d124      	bne.n	8005124 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050dc:	f000 fab8 	bl	8005650 <prvIsQueueFull>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	3310      	adds	r3, #16
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 ff50 	bl	8005f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f6:	f000 fa43 	bl	8005580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050fa:	f000 fd8b 	bl	8005c14 <xTaskResumeAll>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f47f af7c 	bne.w	8004ffe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <xQueueGenericSend+0x1f0>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	e772      	b.n	8004ffe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 fa31 	bl	8005580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800511e:	f000 fd79 	bl	8005c14 <xTaskResumeAll>
 8005122:	e76c      	b.n	8004ffe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005126:	f000 fa2b 	bl	8005580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800512a:	f000 fd73 	bl	8005c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800512e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005130:	4618      	mov	r0, r3
 8005132:	3738      	adds	r7, #56	; 0x38
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <xQueueGenericSendFromISR+0x2c>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	e7fe      	b.n	8005166 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <xQueueGenericSendFromISR+0x3a>
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <xQueueGenericSendFromISR+0x3e>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <xQueueGenericSendFromISR+0x40>
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <xQueueGenericSendFromISR+0x58>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	e7fe      	b.n	8005192 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d103      	bne.n	80051a2 <xQueueGenericSendFromISR+0x66>
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <xQueueGenericSendFromISR+0x6a>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <xQueueGenericSendFromISR+0x6c>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <xQueueGenericSendFromISR+0x84>
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	e7fe      	b.n	80051be <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c0:	f001 ff10 	bl	8006fe4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051c4:	f3ef 8211 	mrs	r2, BASEPRI
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	61ba      	str	r2, [r7, #24]
 80051da:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <xQueueGenericSendFromISR+0xb6>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d12c      	bne.n	800524c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005202:	f000 f92d 	bl	8005460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005206:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d112      	bne.n	8005236 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	d016      	beq.n	8005246 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	3324      	adds	r3, #36	; 0x24
 800521c:	4618      	mov	r0, r3
 800521e:	f000 ff07 	bl	8006030 <xTaskRemoveFromEventList>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e007      	b.n	8005246 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800523a:	3301      	adds	r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	b25a      	sxtb	r2, r3
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005246:	2301      	movs	r3, #1
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800524a:	e001      	b.n	8005250 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800525c:	4618      	mov	r0, r3
 800525e:	3738      	adds	r7, #56	; 0x38
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <xQueueReceive+0x2e>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	e7fe      	b.n	8005290 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <xQueueReceive+0x3c>
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <xQueueReceive+0x40>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <xQueueReceive+0x42>
 80052a4:	2300      	movs	r3, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <xQueueReceive+0x5a>
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	e7fe      	b.n	80052bc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052be:	f001 f86d 	bl	800639c <xTaskGetSchedulerState>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <xQueueReceive+0x6a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <xQueueReceive+0x6e>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueReceive+0x70>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <xQueueReceive+0x88>
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e7fe      	b.n	80052ea <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ec:	f001 fd9e 	bl	8006e2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01f      	beq.n	800533c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005300:	f000 f918 	bl	8005534 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	1e5a      	subs	r2, r3, #1
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00f      	beq.n	8005334 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	3310      	adds	r3, #16
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fe89 	bl	8006030 <xTaskRemoveFromEventList>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005324:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <xQueueReceive+0x1b4>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005334:	f001 fda8 	bl	8006e88 <vPortExitCritical>
				return pdPASS;
 8005338:	2301      	movs	r3, #1
 800533a:	e069      	b.n	8005410 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005342:	f001 fda1 	bl	8006e88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005346:	2300      	movs	r3, #0
 8005348:	e062      	b.n	8005410 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fecd 	bl	80060f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800535a:	2301      	movs	r3, #1
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800535e:	f001 fd93 	bl	8006e88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005362:	f000 fc49 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005366:	f001 fd61 	bl	8006e2c <vPortEnterCritical>
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005370:	b25b      	sxtb	r3, r3
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d103      	bne.n	8005380 <xQueueReceive+0x11c>
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005386:	b25b      	sxtb	r3, r3
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d103      	bne.n	8005396 <xQueueReceive+0x132>
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005396:	f001 fd77 	bl	8006e88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800539a:	1d3a      	adds	r2, r7, #4
 800539c:	f107 0310 	add.w	r3, r7, #16
 80053a0:	4611      	mov	r1, r2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 febc 	bl	8006120 <xTaskCheckForTimeOut>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d123      	bne.n	80053f6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b0:	f000 f938 	bl	8005624 <prvIsQueueEmpty>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d017      	beq.n	80053ea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	3324      	adds	r3, #36	; 0x24
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4611      	mov	r1, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fde6 	bl	8005f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ca:	f000 f8d9 	bl	8005580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053ce:	f000 fc21 	bl	8005c14 <xTaskResumeAll>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d189      	bne.n	80052ec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80053d8:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <xQueueReceive+0x1b4>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	e780      	b.n	80052ec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ec:	f000 f8c8 	bl	8005580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053f0:	f000 fc10 	bl	8005c14 <xTaskResumeAll>
 80053f4:	e77a      	b.n	80052ec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f8:	f000 f8c2 	bl	8005580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053fc:	f000 fc0a 	bl	8005c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005402:	f000 f90f 	bl	8005624 <prvIsQueueEmpty>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	f43f af6f 	beq.w	80052ec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800540e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005410:	4618      	mov	r0, r3
 8005412:	3730      	adds	r7, #48	; 0x30
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <vQueueDelete+0x26>
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	e7fe      	b.n	8005440 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f944 	bl	80056d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f001 fec6 	bl	80071e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d14d      	bne.n	8005522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 ffa4 	bl	80063d8 <xTaskPriorityDisinherit>
 8005490:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	e043      	b.n	8005522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d119      	bne.n	80054d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6858      	ldr	r0, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	461a      	mov	r2, r3
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	f001 ffd8 	bl	8007460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	441a      	add	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d32b      	bcc.n	8005522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e026      	b.n	8005522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68d8      	ldr	r0, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	461a      	mov	r2, r3
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	f001 ffbe 	bl	8007460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	425b      	negs	r3, r3
 80054ee:	441a      	add	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d207      	bcs.n	8005510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	425b      	negs	r3, r3
 800550a:	441a      	add	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d105      	bne.n	8005522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	3b01      	subs	r3, #1
 8005520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	441a      	add	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	d303      	bcc.n	8005568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68d9      	ldr	r1, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	461a      	mov	r2, r3
 8005572:	6838      	ldr	r0, [r7, #0]
 8005574:	f001 ff74 	bl	8007460 <memcpy>
	}
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005588:	f001 fc50 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005594:	e011      	b.n	80055ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d012      	beq.n	80055c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3324      	adds	r3, #36	; 0x24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fd44 	bl	8006030 <xTaskRemoveFromEventList>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055ae:	f000 fe17 	bl	80061e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dce9      	bgt.n	8005596 <prvUnlockQueue+0x16>
 80055c2:	e000      	b.n	80055c6 <prvUnlockQueue+0x46>
					break;
 80055c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	22ff      	movs	r2, #255	; 0xff
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055ce:	f001 fc5b 	bl	8006e88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055d2:	f001 fc2b 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055de:	e011      	b.n	8005604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3310      	adds	r3, #16
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fd1f 	bl	8006030 <xTaskRemoveFromEventList>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055f8:	f000 fdf2 	bl	80061e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055fc:	7bbb      	ldrb	r3, [r7, #14]
 80055fe:	3b01      	subs	r3, #1
 8005600:	b2db      	uxtb	r3, r3
 8005602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005608:	2b00      	cmp	r3, #0
 800560a:	dce9      	bgt.n	80055e0 <prvUnlockQueue+0x60>
 800560c:	e000      	b.n	8005610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800560e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005618:	f001 fc36 	bl	8006e88 <vPortExitCritical>
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800562c:	f001 fbfe 	bl	8006e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005638:	2301      	movs	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e001      	b.n	8005642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005642:	f001 fc21 	bl	8006e88 <vPortExitCritical>

	return xReturn;
 8005646:	68fb      	ldr	r3, [r7, #12]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005658:	f001 fbe8 	bl	8006e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	429a      	cmp	r2, r3
 8005666:	d102      	bne.n	800566e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005668:	2301      	movs	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e001      	b.n	8005672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005672:	f001 fc09 	bl	8006e88 <vPortExitCritical>

	return xReturn;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e014      	b.n	80056ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005690:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <vQueueAddToRegistry+0x4c>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800569c:	490b      	ldr	r1, [pc, #44]	; (80056cc <vQueueAddToRegistry+0x4c>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <vQueueAddToRegistry+0x4c>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056b2:	e005      	b.n	80056c0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b07      	cmp	r3, #7
 80056be:	d9e7      	bls.n	8005690 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20004b1c 	.word	0x20004b1c

080056d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e016      	b.n	800570c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <vQueueUnregisterQueue+0x50>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d10b      	bne.n	8005706 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80056ee:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <vQueueUnregisterQueue+0x50>)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2100      	movs	r1, #0
 80056f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80056f8:	4a09      	ldr	r2, [pc, #36]	; (8005720 <vQueueUnregisterQueue+0x50>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]
				break;
 8005704:	e005      	b.n	8005712 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b07      	cmp	r3, #7
 8005710:	d9e5      	bls.n	80056de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20004b1c 	.word	0x20004b1c

08005724 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005734:	f001 fb7a 	bl	8006e2c <vPortEnterCritical>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800573e:	b25b      	sxtb	r3, r3
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d103      	bne.n	800574e <vQueueWaitForMessageRestricted+0x2a>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005754:	b25b      	sxtb	r3, r3
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d103      	bne.n	8005764 <vQueueWaitForMessageRestricted+0x40>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005764:	f001 fb90 	bl	8006e88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	3324      	adds	r3, #36	; 0x24
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fc2f 	bl	8005fdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800577e:	6978      	ldr	r0, [r7, #20]
 8005780:	f7ff fefe 	bl	8005580 <prvUnlockQueue>
	}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	; 0x38
 8005790:	af04      	add	r7, sp, #16
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <xTaskCreateStatic+0x28>
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	e7fe      	b.n	80057b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <xTaskCreateStatic+0x42>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	e7fe      	b.n	80057cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057ce:	235c      	movs	r3, #92	; 0x5c
 80057d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b5c      	cmp	r3, #92	; 0x5c
 80057d6:	d009      	beq.n	80057ec <xTaskCreateStatic+0x60>
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e7fe      	b.n	80057ea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01e      	beq.n	8005832 <xTaskCreateStatic+0xa6>
 80057f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01b      	beq.n	8005832 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005802:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800580c:	2300      	movs	r3, #0
 800580e:	9303      	str	r3, [sp, #12]
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	9302      	str	r3, [sp, #8]
 8005814:	f107 0314 	add.w	r3, r7, #20
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f850 	bl	80058ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800582a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800582c:	f000 f8dc 	bl	80059e8 <prvAddNewTaskToReadyList>
 8005830:	e001      	b.n	8005836 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005836:	697b      	ldr	r3, [r7, #20]
	}
 8005838:	4618      	mov	r0, r3
 800583a:	3728      	adds	r7, #40	; 0x28
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af04      	add	r7, sp, #16
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4618      	mov	r0, r3
 8005856:	f001 fc03 	bl	8007060 <pvPortMalloc>
 800585a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005862:	205c      	movs	r0, #92	; 0x5c
 8005864:	f001 fbfc 	bl	8007060 <pvPortMalloc>
 8005868:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
 8005876:	e005      	b.n	8005884 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005878:	6978      	ldr	r0, [r7, #20]
 800587a:	f001 fcb3 	bl	80071e4 <vPortFree>
 800587e:	e001      	b.n	8005884 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	2300      	movs	r3, #0
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	9302      	str	r3, [sp, #8]
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f80e 	bl	80058ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ae:	69f8      	ldr	r0, [r7, #28]
 80058b0:	f000 f89a 	bl	80059e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058b4:	2301      	movs	r3, #1
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	e002      	b.n	80058c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058c0:	69bb      	ldr	r3, [r7, #24]
	}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	461a      	mov	r2, r3
 80058e2:	21a5      	movs	r1, #165	; 0xa5
 80058e4:	f001 fdc7 	bl	8007476 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058f2:	3b01      	subs	r3, #1
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f023 0307 	bic.w	r3, r3, #7
 8005900:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <prvInitialiseNewTask+0x56>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e7fe      	b.n	800591e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01f      	beq.n	8005966 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	e012      	b.n	8005952 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	7819      	ldrb	r1, [r3, #0]
 8005934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	3334      	adds	r3, #52	; 0x34
 800593c:	460a      	mov	r2, r1
 800593e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3301      	adds	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d9e9      	bls.n	800592c <prvInitialiseNewTask+0x62>
 8005958:	e000      	b.n	800595c <prvInitialiseNewTask+0x92>
			{
				break;
 800595a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005964:	e003      	b.n	800596e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	2b37      	cmp	r3, #55	; 0x37
 8005972:	d901      	bls.n	8005978 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005974:	2337      	movs	r3, #55	; 0x37
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005982:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff f8a2 	bl	8004ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	3318      	adds	r3, #24
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff f89d 	bl	8004ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	2200      	movs	r2, #0
 80059b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	69b8      	ldr	r0, [r7, #24]
 80059c8:	f001 f90c 	bl	8006be4 <pxPortInitialiseStack>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059de:	bf00      	nop
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059f0:	f001 fa1c 	bl	8006e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059f4:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <prvAddNewTaskToReadyList+0xc4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	4a2c      	ldr	r2, [pc, #176]	; (8005aac <prvAddNewTaskToReadyList+0xc4>)
 80059fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059fe:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a06:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a0c:	4b27      	ldr	r3, [pc, #156]	; (8005aac <prvAddNewTaskToReadyList+0xc4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d110      	bne.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a14:	f000 fc08 	bl	8006228 <prvInitialiseTaskLists>
 8005a18:	e00d      	b.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a1a:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <prvAddNewTaskToReadyList+0xcc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a22:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d802      	bhi.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a36:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <prvAddNewTaskToReadyList+0xd0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a1e      	ldr	r2, [pc, #120]	; (8005ab8 <prvAddNewTaskToReadyList+0xd0>)
 8005a3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <prvAddNewTaskToReadyList+0xd0>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <prvAddNewTaskToReadyList+0xd4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d903      	bls.n	8005a5c <prvAddNewTaskToReadyList+0x74>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4a18      	ldr	r2, [pc, #96]	; (8005abc <prvAddNewTaskToReadyList+0xd4>)
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <prvAddNewTaskToReadyList+0xd8>)
 8005a6a:	441a      	add	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f7ff f83d 	bl	8004af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a78:	f001 fa06 	bl	8006e88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <prvAddNewTaskToReadyList+0xcc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00e      	beq.n	8005aa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d207      	bcs.n	8005aa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <prvAddNewTaskToReadyList+0xdc>)
 8005a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000c24 	.word	0x20000c24
 8005ab0:	20000750 	.word	0x20000750
 8005ab4:	20000c30 	.word	0x20000c30
 8005ab8:	20000c40 	.word	0x20000c40
 8005abc:	20000c2c 	.word	0x20000c2c
 8005ac0:	20000754 	.word	0x20000754
 8005ac4:	e000ed04 	.word	0xe000ed04

08005ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ada:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <vTaskDelay+0x60>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <vTaskDelay+0x2e>
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	e7fe      	b.n	8005af4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005af6:	f000 f87f 	bl	8005bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005afa:	2100      	movs	r1, #0
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fcd7 	bl	80064b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b02:	f000 f887 	bl	8005c14 <xTaskResumeAll>
 8005b06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d107      	bne.n	8005b1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <vTaskDelay+0x64>)
 8005b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000c4c 	.word	0x20000c4c
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b3e:	463a      	mov	r2, r7
 8005b40:	1d39      	adds	r1, r7, #4
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe ff72 	bl	8004a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	9202      	str	r2, [sp, #8]
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	2300      	movs	r3, #0
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	460a      	mov	r2, r1
 8005b5e:	4920      	ldr	r1, [pc, #128]	; (8005be0 <vTaskStartScheduler+0xb0>)
 8005b60:	4820      	ldr	r0, [pc, #128]	; (8005be4 <vTaskStartScheduler+0xb4>)
 8005b62:	f7ff fe13 	bl	800578c <xTaskCreateStatic>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <vTaskStartScheduler+0xb8>)
 8005b6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b6c:	4b1e      	ldr	r3, [pc, #120]	; (8005be8 <vTaskStartScheduler+0xb8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b74:	2301      	movs	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e001      	b.n	8005b7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d102      	bne.n	8005b8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b84:	f000 fce8 	bl	8006558 <xTimerCreateTimerTask>
 8005b88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d115      	bne.n	8005bbc <vTaskStartScheduler+0x8c>
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <vTaskStartScheduler+0xbc>)
 8005ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <vTaskStartScheduler+0xc0>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <vTaskStartScheduler+0xc4>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb6:	f001 f89b 	bl	8006cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bba:	e00d      	b.n	8005bd8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d109      	bne.n	8005bd8 <vTaskStartScheduler+0xa8>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e7fe      	b.n	8005bd6 <vTaskStartScheduler+0xa6>
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08007cf0 	.word	0x08007cf0
 8005be4:	080061f9 	.word	0x080061f9
 8005be8:	20000c48 	.word	0x20000c48
 8005bec:	20000c44 	.word	0x20000c44
 8005bf0:	20000c30 	.word	0x20000c30
 8005bf4:	20000c28 	.word	0x20000c28

08005bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <vTaskSuspendAll+0x18>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	4a03      	ldr	r2, [pc, #12]	; (8005c10 <vTaskSuspendAll+0x18>)
 8005c04:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20000c4c 	.word	0x20000c4c

08005c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c22:	4b41      	ldr	r3, [pc, #260]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <xTaskResumeAll+0x2a>
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	e7fe      	b.n	8005c3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c3e:	f001 f8f5 	bl	8006e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c42:	4b39      	ldr	r3, [pc, #228]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	4a37      	ldr	r2, [pc, #220]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4c:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d162      	bne.n	8005d1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <xTaskResumeAll+0x118>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05e      	beq.n	8005d1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5c:	e02f      	b.n	8005cbe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c5e:	4b34      	ldr	r3, [pc, #208]	; (8005d30 <xTaskResumeAll+0x11c>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3318      	adds	r3, #24
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe ff9e 	bl	8004bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe ff99 	bl	8004bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	4b2d      	ldr	r3, [pc, #180]	; (8005d34 <xTaskResumeAll+0x120>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d903      	bls.n	8005c8e <xTaskResumeAll+0x7a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <xTaskResumeAll+0x120>)
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <xTaskResumeAll+0x124>)
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f7fe ff24 	bl	8004af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cae:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <xTaskResumeAll+0x128>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005cb8:	4b21      	ldr	r3, [pc, #132]	; (8005d40 <xTaskResumeAll+0x12c>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cbe:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <xTaskResumeAll+0x11c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1cb      	bne.n	8005c5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ccc:	f000 fb46 	bl	800635c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cd0:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <xTaskResumeAll+0x130>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cdc:	f000 f846 	bl	8005d6c <xTaskIncrementTick>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ce6:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <xTaskResumeAll+0x12c>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f1      	bne.n	8005cdc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005cf8:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <xTaskResumeAll+0x130>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <xTaskResumeAll+0x12c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <xTaskResumeAll+0x134>)
 8005d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f001 f8b5 	bl	8006e88 <vPortExitCritical>

	return xAlreadyYielded;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000c4c 	.word	0x20000c4c
 8005d2c:	20000c24 	.word	0x20000c24
 8005d30:	20000be4 	.word	0x20000be4
 8005d34:	20000c2c 	.word	0x20000c2c
 8005d38:	20000754 	.word	0x20000754
 8005d3c:	20000750 	.word	0x20000750
 8005d40:	20000c38 	.word	0x20000c38
 8005d44:	20000c34 	.word	0x20000c34
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <xTaskGetTickCount+0x1c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d58:	687b      	ldr	r3, [r7, #4]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000c28 	.word	0x20000c28

08005d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d76:	4b4e      	ldr	r3, [pc, #312]	; (8005eb0 <xTaskIncrementTick+0x144>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 8088 	bne.w	8005e90 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d80:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <xTaskIncrementTick+0x148>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d88:	4a4a      	ldr	r2, [pc, #296]	; (8005eb4 <xTaskIncrementTick+0x148>)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11f      	bne.n	8005dd4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d94:	4b48      	ldr	r3, [pc, #288]	; (8005eb8 <xTaskIncrementTick+0x14c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <xTaskIncrementTick+0x46>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	e7fe      	b.n	8005db0 <xTaskIncrementTick+0x44>
 8005db2:	4b41      	ldr	r3, [pc, #260]	; (8005eb8 <xTaskIncrementTick+0x14c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	4b40      	ldr	r3, [pc, #256]	; (8005ebc <xTaskIncrementTick+0x150>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3e      	ldr	r2, [pc, #248]	; (8005eb8 <xTaskIncrementTick+0x14c>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4a3e      	ldr	r2, [pc, #248]	; (8005ebc <xTaskIncrementTick+0x150>)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4b3e      	ldr	r3, [pc, #248]	; (8005ec0 <xTaskIncrementTick+0x154>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	4a3c      	ldr	r2, [pc, #240]	; (8005ec0 <xTaskIncrementTick+0x154>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	f000 fac4 	bl	800635c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <xTaskIncrementTick+0x158>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d349      	bcc.n	8005e72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dde:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <xTaskIncrementTick+0x14c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <xTaskIncrementTick+0x158>)
 8005dea:	f04f 32ff 	mov.w	r2, #4294967295
 8005dee:	601a      	str	r2, [r3, #0]
					break;
 8005df0:	e03f      	b.n	8005e72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df2:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <xTaskIncrementTick+0x14c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d203      	bcs.n	8005e12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e0a:	4a2e      	ldr	r2, [pc, #184]	; (8005ec4 <xTaskIncrementTick+0x158>)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e10:	e02f      	b.n	8005e72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fec8 	bl	8004bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	3318      	adds	r3, #24
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe febf 	bl	8004bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	4b25      	ldr	r3, [pc, #148]	; (8005ec8 <xTaskIncrementTick+0x15c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d903      	bls.n	8005e42 <xTaskIncrementTick+0xd6>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	4a22      	ldr	r2, [pc, #136]	; (8005ec8 <xTaskIncrementTick+0x15c>)
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <xTaskIncrementTick+0x160>)
 8005e50:	441a      	add	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	3304      	adds	r3, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7fe fe4a 	bl	8004af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <xTaskIncrementTick+0x164>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d3b8      	bcc.n	8005dde <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e70:	e7b5      	b.n	8005dde <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <xTaskIncrementTick+0x164>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4914      	ldr	r1, [pc, #80]	; (8005ecc <xTaskIncrementTick+0x160>)
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d907      	bls.n	8005e9a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e004      	b.n	8005e9a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e90:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <xTaskIncrementTick+0x168>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	4a0f      	ldr	r2, [pc, #60]	; (8005ed4 <xTaskIncrementTick+0x168>)
 8005e98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <xTaskIncrementTick+0x16c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000c4c 	.word	0x20000c4c
 8005eb4:	20000c28 	.word	0x20000c28
 8005eb8:	20000bdc 	.word	0x20000bdc
 8005ebc:	20000be0 	.word	0x20000be0
 8005ec0:	20000c3c 	.word	0x20000c3c
 8005ec4:	20000c44 	.word	0x20000c44
 8005ec8:	20000c2c 	.word	0x20000c2c
 8005ecc:	20000754 	.word	0x20000754
 8005ed0:	20000750 	.word	0x20000750
 8005ed4:	20000c34 	.word	0x20000c34
 8005ed8:	20000c38 	.word	0x20000c38

08005edc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ee2:	4b27      	ldr	r3, [pc, #156]	; (8005f80 <vTaskSwitchContext+0xa4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eea:	4b26      	ldr	r3, [pc, #152]	; (8005f84 <vTaskSwitchContext+0xa8>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef0:	e040      	b.n	8005f74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <vTaskSwitchContext+0xa8>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef8:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <vTaskSwitchContext+0xac>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e00f      	b.n	8005f20 <vTaskSwitchContext+0x44>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <vTaskSwitchContext+0x3e>
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	e7fe      	b.n	8005f18 <vTaskSwitchContext+0x3c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	491a      	ldr	r1, [pc, #104]	; (8005f8c <vTaskSwitchContext+0xb0>)
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0e5      	beq.n	8005f00 <vTaskSwitchContext+0x24>
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <vTaskSwitchContext+0xb0>)
 8005f40:	4413      	add	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	3308      	adds	r3, #8
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d104      	bne.n	8005f64 <vTaskSwitchContext+0x88>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	4a09      	ldr	r2, [pc, #36]	; (8005f90 <vTaskSwitchContext+0xb4>)
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <vTaskSwitchContext+0xac>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20000c4c 	.word	0x20000c4c
 8005f84:	20000c38 	.word	0x20000c38
 8005f88:	20000c2c 	.word	0x20000c2c
 8005f8c:	20000754 	.word	0x20000754
 8005f90:	20000750 	.word	0x20000750

08005f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <vTaskPlaceOnEventList+0x24>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e7fe      	b.n	8005fb6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <vTaskPlaceOnEventList+0x44>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3318      	adds	r3, #24
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fe fdba 	bl	8004b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f000 fa71 	bl	80064b0 <prvAddCurrentTaskToDelayedList>
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000750 	.word	0x20000750

08005fdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <vTaskPlaceOnEventListRestricted+0x26>
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e7fe      	b.n	8006000 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <vTaskPlaceOnEventListRestricted+0x50>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3318      	adds	r3, #24
 8006008:	4619      	mov	r1, r3
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7fe fd71 	bl	8004af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006016:	f04f 33ff 	mov.w	r3, #4294967295
 800601a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	68b8      	ldr	r0, [r7, #8]
 8006020:	f000 fa46 	bl	80064b0 <prvAddCurrentTaskToDelayedList>
	}
 8006024:	bf00      	nop
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000750 	.word	0x20000750

08006030 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <xTaskRemoveFromEventList+0x2a>
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e7fe      	b.n	8006058 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3318      	adds	r3, #24
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fda4 	bl	8004bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006064:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <xTaskRemoveFromEventList+0xac>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d11d      	bne.n	80060a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	3304      	adds	r3, #4
 8006070:	4618      	mov	r0, r3
 8006072:	f7fe fd9b 	bl	8004bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	4b19      	ldr	r3, [pc, #100]	; (80060e0 <xTaskRemoveFromEventList+0xb0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d903      	bls.n	800608a <xTaskRemoveFromEventList+0x5a>
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	4a16      	ldr	r2, [pc, #88]	; (80060e0 <xTaskRemoveFromEventList+0xb0>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4a13      	ldr	r2, [pc, #76]	; (80060e4 <xTaskRemoveFromEventList+0xb4>)
 8006098:	441a      	add	r2, r3
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f7fe fd26 	bl	8004af2 <vListInsertEnd>
 80060a6:	e005      	b.n	80060b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	3318      	adds	r3, #24
 80060ac:	4619      	mov	r1, r3
 80060ae:	480e      	ldr	r0, [pc, #56]	; (80060e8 <xTaskRemoveFromEventList+0xb8>)
 80060b0:	f7fe fd1f 	bl	8004af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b8:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <xTaskRemoveFromEventList+0xbc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	429a      	cmp	r2, r3
 80060c0:	d905      	bls.n	80060ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060c2:	2301      	movs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <xTaskRemoveFromEventList+0xc0>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e001      	b.n	80060d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060d2:	697b      	ldr	r3, [r7, #20]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000c4c 	.word	0x20000c4c
 80060e0:	20000c2c 	.word	0x20000c2c
 80060e4:	20000754 	.word	0x20000754
 80060e8:	20000be4 	.word	0x20000be4
 80060ec:	20000750 	.word	0x20000750
 80060f0:	20000c38 	.word	0x20000c38

080060f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060fc:	4b06      	ldr	r3, [pc, #24]	; (8006118 <vTaskInternalSetTimeOutState+0x24>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <vTaskInternalSetTimeOutState+0x28>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	605a      	str	r2, [r3, #4]
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	20000c3c 	.word	0x20000c3c
 800611c:	20000c28 	.word	0x20000c28

08006120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d109      	bne.n	8006144 <xTaskCheckForTimeOut+0x24>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e7fe      	b.n	8006142 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <xTaskCheckForTimeOut+0x3e>
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e7fe      	b.n	800615c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800615e:	f000 fe65 	bl	8006e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006162:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <xTaskCheckForTimeOut+0xb8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d102      	bne.n	8006182 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	e023      	b.n	80061ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <xTaskCheckForTimeOut+0xbc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d007      	beq.n	800619e <xTaskCheckForTimeOut+0x7e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	429a      	cmp	r2, r3
 8006196:	d302      	bcc.n	800619e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e015      	b.n	80061ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d20b      	bcs.n	80061c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff9d 	bl	80060f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	e004      	b.n	80061ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061c6:	2301      	movs	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061ca:	f000 fe5d 	bl	8006e88 <vPortExitCritical>

	return xReturn;
 80061ce:	69fb      	ldr	r3, [r7, #28]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3720      	adds	r7, #32
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000c28 	.word	0x20000c28
 80061dc:	20000c3c 	.word	0x20000c3c

080061e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <vTaskMissedYield+0x14>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
}
 80061ea:	bf00      	nop
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20000c38 	.word	0x20000c38

080061f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006200:	f000 f852 	bl	80062a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <prvIdleTask+0x28>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d9f9      	bls.n	8006200 <prvIdleTask+0x8>
			{
				taskYIELD();
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <prvIdleTask+0x2c>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800621c:	e7f0      	b.n	8006200 <prvIdleTask+0x8>
 800621e:	bf00      	nop
 8006220:	20000754 	.word	0x20000754
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800622e:	2300      	movs	r3, #0
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	e00c      	b.n	800624e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4a12      	ldr	r2, [pc, #72]	; (8006288 <prvInitialiseTaskLists+0x60>)
 8006240:	4413      	add	r3, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fc28 	bl	8004a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3301      	adds	r3, #1
 800624c:	607b      	str	r3, [r7, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b37      	cmp	r3, #55	; 0x37
 8006252:	d9ef      	bls.n	8006234 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006254:	480d      	ldr	r0, [pc, #52]	; (800628c <prvInitialiseTaskLists+0x64>)
 8006256:	f7fe fc1f 	bl	8004a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800625a:	480d      	ldr	r0, [pc, #52]	; (8006290 <prvInitialiseTaskLists+0x68>)
 800625c:	f7fe fc1c 	bl	8004a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006260:	480c      	ldr	r0, [pc, #48]	; (8006294 <prvInitialiseTaskLists+0x6c>)
 8006262:	f7fe fc19 	bl	8004a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006266:	480c      	ldr	r0, [pc, #48]	; (8006298 <prvInitialiseTaskLists+0x70>)
 8006268:	f7fe fc16 	bl	8004a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800626c:	480b      	ldr	r0, [pc, #44]	; (800629c <prvInitialiseTaskLists+0x74>)
 800626e:	f7fe fc13 	bl	8004a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <prvInitialiseTaskLists+0x78>)
 8006274:	4a05      	ldr	r2, [pc, #20]	; (800628c <prvInitialiseTaskLists+0x64>)
 8006276:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <prvInitialiseTaskLists+0x7c>)
 800627a:	4a05      	ldr	r2, [pc, #20]	; (8006290 <prvInitialiseTaskLists+0x68>)
 800627c:	601a      	str	r2, [r3, #0]
}
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000754 	.word	0x20000754
 800628c:	20000bb4 	.word	0x20000bb4
 8006290:	20000bc8 	.word	0x20000bc8
 8006294:	20000be4 	.word	0x20000be4
 8006298:	20000bf8 	.word	0x20000bf8
 800629c:	20000c10 	.word	0x20000c10
 80062a0:	20000bdc 	.word	0x20000bdc
 80062a4:	20000be0 	.word	0x20000be0

080062a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ae:	e019      	b.n	80062e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062b0:	f000 fdbc 	bl	8006e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b4:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <prvCheckTasksWaitingTermination+0x4c>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fc73 	bl	8004bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062c6:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <prvCheckTasksWaitingTermination+0x50>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	4a0a      	ldr	r2, [pc, #40]	; (80062f8 <prvCheckTasksWaitingTermination+0x50>)
 80062ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <prvCheckTasksWaitingTermination+0x54>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <prvCheckTasksWaitingTermination+0x54>)
 80062d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062da:	f000 fdd5 	bl	8006e88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f80e 	bl	8006300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <prvCheckTasksWaitingTermination+0x54>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e1      	bne.n	80062b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000bf8 	.word	0x20000bf8
 80062f8:	20000c24 	.word	0x20000c24
 80062fc:	20000c0c 	.word	0x20000c0c

08006300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800630e:	2b00      	cmp	r3, #0
 8006310:	d108      	bne.n	8006324 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	4618      	mov	r0, r3
 8006318:	f000 ff64 	bl	80071e4 <vPortFree>
				vPortFree( pxTCB );
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 ff61 	bl	80071e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006322:	e017      	b.n	8006354 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800632a:	2b01      	cmp	r3, #1
 800632c:	d103      	bne.n	8006336 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 ff58 	bl	80071e4 <vPortFree>
	}
 8006334:	e00e      	b.n	8006354 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800633c:	2b02      	cmp	r3, #2
 800633e:	d009      	beq.n	8006354 <prvDeleteTCB+0x54>
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e7fe      	b.n	8006352 <prvDeleteTCB+0x52>
	}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006362:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <prvResetNextTaskUnblockTime+0x38>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <prvResetNextTaskUnblockTime+0x3c>)
 800636e:	f04f 32ff 	mov.w	r2, #4294967295
 8006372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006374:	e008      	b.n	8006388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <prvResetNextTaskUnblockTime+0x38>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <prvResetNextTaskUnblockTime+0x3c>)
 8006386:	6013      	str	r3, [r2, #0]
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	20000bdc 	.word	0x20000bdc
 8006398:	20000c44 	.word	0x20000c44

0800639c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <xTaskGetSchedulerState+0x34>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063aa:	2301      	movs	r3, #1
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	e008      	b.n	80063c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063b0:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <xTaskGetSchedulerState+0x38>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063b8:	2302      	movs	r3, #2
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	e001      	b.n	80063c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063be:	2300      	movs	r3, #0
 80063c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063c2:	687b      	ldr	r3, [r7, #4]
	}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000c30 	.word	0x20000c30
 80063d4:	20000c4c 	.word	0x20000c4c

080063d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d054      	beq.n	8006498 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063ee:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <xTaskPriorityDisinherit+0xcc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d009      	beq.n	800640c <xTaskPriorityDisinherit+0x34>
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e7fe      	b.n	800640a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <xTaskPriorityDisinherit+0x50>
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	e7fe      	b.n	8006426 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643a:	429a      	cmp	r2, r3
 800643c:	d02c      	beq.n	8006498 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006442:	2b00      	cmp	r3, #0
 8006444:	d128      	bne.n	8006498 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	3304      	adds	r3, #4
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fbae 	bl	8004bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <xTaskPriorityDisinherit+0xd0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d903      	bls.n	8006478 <xTaskPriorityDisinherit+0xa0>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <xTaskPriorityDisinherit+0xd0>)
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4a09      	ldr	r2, [pc, #36]	; (80064ac <xTaskPriorityDisinherit+0xd4>)
 8006486:	441a      	add	r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f7fe fb2f 	bl	8004af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006498:	697b      	ldr	r3, [r7, #20]
	}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000750 	.word	0x20000750
 80064a8:	20000c2c 	.word	0x20000c2c
 80064ac:	20000754 	.word	0x20000754

080064b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ba:	4b21      	ldr	r3, [pc, #132]	; (8006540 <prvAddCurrentTaskToDelayedList+0x90>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c0:	4b20      	ldr	r3, [pc, #128]	; (8006544 <prvAddCurrentTaskToDelayedList+0x94>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fb70 	bl	8004bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d10a      	bne.n	80064ea <prvAddCurrentTaskToDelayedList+0x3a>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064da:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <prvAddCurrentTaskToDelayedList+0x94>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4819      	ldr	r0, [pc, #100]	; (8006548 <prvAddCurrentTaskToDelayedList+0x98>)
 80064e4:	f7fe fb05 	bl	8004af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064e8:	e026      	b.n	8006538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064f2:	4b14      	ldr	r3, [pc, #80]	; (8006544 <prvAddCurrentTaskToDelayedList+0x94>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d209      	bcs.n	8006516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <prvAddCurrentTaskToDelayedList+0x94>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fe fb13 	bl	8004b3a <vListInsert>
}
 8006514:	e010      	b.n	8006538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006516:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <prvAddCurrentTaskToDelayedList+0x94>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3304      	adds	r3, #4
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fe fb09 	bl	8004b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	429a      	cmp	r2, r3
 8006530:	d202      	bcs.n	8006538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006532:	4a08      	ldr	r2, [pc, #32]	; (8006554 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000c28 	.word	0x20000c28
 8006544:	20000750 	.word	0x20000750
 8006548:	20000c10 	.word	0x20000c10
 800654c:	20000be0 	.word	0x20000be0
 8006550:	20000bdc 	.word	0x20000bdc
 8006554:	20000c44 	.word	0x20000c44

08006558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006562:	f000 faff 	bl	8006b64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006566:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <xTimerCreateTimerTask+0x80>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d021      	beq.n	80065b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006576:	1d3a      	adds	r2, r7, #4
 8006578:	f107 0108 	add.w	r1, r7, #8
 800657c:	f107 030c 	add.w	r3, r7, #12
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fa6f 	bl	8004a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	9202      	str	r2, [sp, #8]
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	2302      	movs	r3, #2
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	460a      	mov	r2, r1
 8006598:	4910      	ldr	r1, [pc, #64]	; (80065dc <xTimerCreateTimerTask+0x84>)
 800659a:	4811      	ldr	r0, [pc, #68]	; (80065e0 <xTimerCreateTimerTask+0x88>)
 800659c:	f7ff f8f6 	bl	800578c <xTaskCreateStatic>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <xTimerCreateTimerTask+0x8c>)
 80065a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <xTimerCreateTimerTask+0x8c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065ae:	2301      	movs	r3, #1
 80065b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <xTimerCreateTimerTask+0x74>
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	e7fe      	b.n	80065ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80065cc:	697b      	ldr	r3, [r7, #20]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000c80 	.word	0x20000c80
 80065dc:	08007cf8 	.word	0x08007cf8
 80065e0:	08006719 	.word	0x08006719
 80065e4:	20000c84 	.word	0x20000c84

080065e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <xTimerGenericCommand+0x2c>
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	e7fe      	b.n	8006612 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006614:	4b19      	ldr	r3, [pc, #100]	; (800667c <xTimerGenericCommand+0x94>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02a      	beq.n	8006672 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b05      	cmp	r3, #5
 800662c:	dc18      	bgt.n	8006660 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800662e:	f7ff feb5 	bl	800639c <xTaskGetSchedulerState>
 8006632:	4603      	mov	r3, r0
 8006634:	2b02      	cmp	r3, #2
 8006636:	d109      	bne.n	800664c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006638:	4b10      	ldr	r3, [pc, #64]	; (800667c <xTimerGenericCommand+0x94>)
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	f107 0110 	add.w	r1, r7, #16
 8006640:	2300      	movs	r3, #0
 8006642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006644:	f7fe fc80 	bl	8004f48 <xQueueGenericSend>
 8006648:	6278      	str	r0, [r7, #36]	; 0x24
 800664a:	e012      	b.n	8006672 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <xTimerGenericCommand+0x94>)
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	f107 0110 	add.w	r1, r7, #16
 8006654:	2300      	movs	r3, #0
 8006656:	2200      	movs	r2, #0
 8006658:	f7fe fc76 	bl	8004f48 <xQueueGenericSend>
 800665c:	6278      	str	r0, [r7, #36]	; 0x24
 800665e:	e008      	b.n	8006672 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <xTimerGenericCommand+0x94>)
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	f107 0110 	add.w	r1, r7, #16
 8006668:	2300      	movs	r3, #0
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	f7fe fd66 	bl	800513c <xQueueGenericSendFromISR>
 8006670:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006674:	4618      	mov	r0, r3
 8006676:	3728      	adds	r7, #40	; 0x28
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000c80 	.word	0x20000c80

08006680 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <prvProcessExpiredTimer+0x94>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fa87 	bl	8004bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d021      	beq.n	80066f0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	18d1      	adds	r1, r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	6978      	ldr	r0, [r7, #20]
 80066ba:	f000 f8d1 	bl	8006860 <prvInsertTimerInActiveList>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01e      	beq.n	8006702 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066c4:	2300      	movs	r3, #0
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	2100      	movs	r1, #0
 80066ce:	6978      	ldr	r0, [r7, #20]
 80066d0:	f7ff ff8a 	bl	80065e8 <xTimerGenericCommand>
 80066d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d112      	bne.n	8006702 <prvProcessExpiredTimer+0x82>
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e7fe      	b.n	80066ee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	6978      	ldr	r0, [r7, #20]
 8006708:	4798      	blx	r3
}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000c78 	.word	0x20000c78

08006718 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006720:	f107 0308 	add.w	r3, r7, #8
 8006724:	4618      	mov	r0, r3
 8006726:	f000 f857 	bl	80067d8 <prvGetNextExpireTime>
 800672a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4619      	mov	r1, r3
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f803 	bl	800673c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006736:	f000 f8d5 	bl	80068e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800673a:	e7f1      	b.n	8006720 <prvTimerTask+0x8>

0800673c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006746:	f7ff fa57 	bl	8005bf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f866 	bl	8006820 <prvSampleTimeNow>
 8006754:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d130      	bne.n	80067be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <prvProcessTimerOrBlockTask+0x3c>
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	429a      	cmp	r2, r3
 8006768:	d806      	bhi.n	8006778 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800676a:	f7ff fa53 	bl	8005c14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff ff85 	bl	8006680 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006776:	e024      	b.n	80067c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <prvProcessTimerOrBlockTask+0x90>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <prvProcessTimerOrBlockTask+0x50>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <prvProcessTimerOrBlockTask+0x52>
 800678c:	2300      	movs	r3, #0
 800678e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <prvProcessTimerOrBlockTask+0x94>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4619      	mov	r1, r3
 800679e:	f7fe ffc1 	bl	8005724 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067a2:	f7ff fa37 	bl	8005c14 <xTaskResumeAll>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <prvProcessTimerOrBlockTask+0x98>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
}
 80067bc:	e001      	b.n	80067c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067be:	f7ff fa29 	bl	8005c14 <xTaskResumeAll>
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000c7c 	.word	0x20000c7c
 80067d0:	20000c80 	.word	0x20000c80
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067e0:	4b0e      	ldr	r3, [pc, #56]	; (800681c <prvGetNextExpireTime+0x44>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <prvGetNextExpireTime+0x16>
 80067ea:	2201      	movs	r2, #1
 80067ec:	e000      	b.n	80067f0 <prvGetNextExpireTime+0x18>
 80067ee:	2200      	movs	r2, #0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d105      	bne.n	8006808 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <prvGetNextExpireTime+0x44>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e001      	b.n	800680c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800680c:	68fb      	ldr	r3, [r7, #12]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000c78 	.word	0x20000c78

08006820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006828:	f7ff fa90 	bl	8005d4c <xTaskGetTickCount>
 800682c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <prvSampleTimeNow+0x3c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	d205      	bcs.n	8006844 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006838:	f000 f930 	bl	8006a9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e002      	b.n	800684a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800684a:	4a04      	ldr	r2, [pc, #16]	; (800685c <prvSampleTimeNow+0x3c>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000c88 	.word	0x20000c88

08006860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d812      	bhi.n	80068ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	e01b      	b.n	80068d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <prvInsertTimerInActiveList+0x7c>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7fe f948 	bl	8004b3a <vListInsert>
 80068aa:	e012      	b.n	80068d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d206      	bcs.n	80068c2 <prvInsertTimerInActiveList+0x62>
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e007      	b.n	80068d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068c2:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <prvInsertTimerInActiveList+0x80>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f7fe f934 	bl	8004b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068d2:	697b      	ldr	r3, [r7, #20]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000c7c 	.word	0x20000c7c
 80068e0:	20000c78 	.word	0x20000c78

080068e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068ea:	e0c6      	b.n	8006a7a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da17      	bge.n	8006922 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068f2:	1d3b      	adds	r3, r7, #4
 80068f4:	3304      	adds	r3, #4
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <prvProcessReceivedCommands+0x2e>
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e7fe      	b.n	8006910 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006918:	6850      	ldr	r0, [r2, #4]
 800691a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691c:	6892      	ldr	r2, [r2, #8]
 800691e:	4611      	mov	r1, r2
 8006920:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f2c0 80a7 	blt.w	8006a78 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	3304      	adds	r3, #4
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe f936 	bl	8004bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006940:	463b      	mov	r3, r7
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff ff6c 	bl	8006820 <prvSampleTimeNow>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b09      	cmp	r3, #9
 800694e:	f200 8094 	bhi.w	8006a7a <prvProcessReceivedCommands+0x196>
 8006952:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <prvProcessReceivedCommands+0x74>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	08006981 	.word	0x08006981
 800695c:	08006981 	.word	0x08006981
 8006960:	08006981 	.word	0x08006981
 8006964:	080069f3 	.word	0x080069f3
 8006968:	08006a07 	.word	0x08006a07
 800696c:	08006a4f 	.word	0x08006a4f
 8006970:	08006981 	.word	0x08006981
 8006974:	08006981 	.word	0x08006981
 8006978:	080069f3 	.word	0x080069f3
 800697c:	08006a07 	.word	0x08006a07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	18d1      	adds	r1, r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a0:	f7ff ff5e 	bl	8006860 <prvInsertTimerInActiveList>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d067      	beq.n	8006a7a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05c      	beq.n	8006a7a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	441a      	add	r2, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	2300      	movs	r3, #0
 80069ce:	2100      	movs	r1, #0
 80069d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d2:	f7ff fe09 	bl	80065e8 <xTimerGenericCommand>
 80069d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d14d      	bne.n	8006a7a <prvProcessReceivedCommands+0x196>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e7fe      	b.n	80069f0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a04:	e039      	b.n	8006a7a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <prvProcessReceivedCommands+0x156>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e7fe      	b.n	8006a38 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	18d1      	adds	r1, r2, r3
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a48:	f7ff ff0a 	bl	8006860 <prvInsertTimerInActiveList>
					break;
 8006a4c:	e015      	b.n	8006a7a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a5e:	f000 fbc1 	bl	80071e4 <vPortFree>
 8006a62:	e00a      	b.n	8006a7a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a76:	e000      	b.n	8006a7a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <prvProcessReceivedCommands+0x1b4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	1d39      	adds	r1, r7, #4
 8006a80:	2200      	movs	r2, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fbee 	bl	8005264 <xQueueReceive>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f47f af2e 	bne.w	80068ec <prvProcessReceivedCommands+0x8>
	}
}
 8006a90:	bf00      	nop
 8006a92:	3730      	adds	r7, #48	; 0x30
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000c80 	.word	0x20000c80

08006a9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006aa2:	e047      	b.n	8006b34 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aa4:	4b2d      	ldr	r3, [pc, #180]	; (8006b5c <prvSwitchTimerLists+0xc0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aae:	4b2b      	ldr	r3, [pc, #172]	; (8006b5c <prvSwitchTimerLists+0xc0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe f875 	bl	8004bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d02d      	beq.n	8006b34 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4413      	add	r3, r2
 8006ae0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d90e      	bls.n	8006b08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006af6:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <prvSwitchTimerLists+0xc0>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f7fe f81a 	bl	8004b3a <vListInsert>
 8006b06:	e015      	b.n	8006b34 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	2100      	movs	r1, #0
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff fd68 	bl	80065e8 <xTimerGenericCommand>
 8006b18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d109      	bne.n	8006b34 <prvSwitchTimerLists+0x98>
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	603b      	str	r3, [r7, #0]
 8006b32:	e7fe      	b.n	8006b32 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b34:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <prvSwitchTimerLists+0xc0>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1b2      	bne.n	8006aa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b3e:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <prvSwitchTimerLists+0xc0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <prvSwitchTimerLists+0xc4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a04      	ldr	r2, [pc, #16]	; (8006b5c <prvSwitchTimerLists+0xc0>)
 8006b4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b4c:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <prvSwitchTimerLists+0xc4>)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	6013      	str	r3, [r2, #0]
}
 8006b52:	bf00      	nop
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000c78 	.word	0x20000c78
 8006b60:	20000c7c 	.word	0x20000c7c

08006b64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b6a:	f000 f95f 	bl	8006e2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b6e:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <prvCheckForValidListAndQueue+0x60>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d120      	bne.n	8006bb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b76:	4814      	ldr	r0, [pc, #80]	; (8006bc8 <prvCheckForValidListAndQueue+0x64>)
 8006b78:	f7fd ff8e 	bl	8004a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b7c:	4813      	ldr	r0, [pc, #76]	; (8006bcc <prvCheckForValidListAndQueue+0x68>)
 8006b7e:	f7fd ff8b 	bl	8004a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <prvCheckForValidListAndQueue+0x6c>)
 8006b84:	4a10      	ldr	r2, [pc, #64]	; (8006bc8 <prvCheckForValidListAndQueue+0x64>)
 8006b86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b88:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <prvCheckForValidListAndQueue+0x70>)
 8006b8a:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <prvCheckForValidListAndQueue+0x68>)
 8006b8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <prvCheckForValidListAndQueue+0x74>)
 8006b94:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <prvCheckForValidListAndQueue+0x78>)
 8006b96:	2110      	movs	r1, #16
 8006b98:	200a      	movs	r0, #10
 8006b9a:	f7fe f899 	bl	8004cd0 <xQueueGenericCreateStatic>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <prvCheckForValidListAndQueue+0x60>)
 8006ba2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <prvCheckForValidListAndQueue+0x60>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <prvCheckForValidListAndQueue+0x60>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	490b      	ldr	r1, [pc, #44]	; (8006be0 <prvCheckForValidListAndQueue+0x7c>)
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe fd64 	bl	8005680 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bb8:	f000 f966 	bl	8006e88 <vPortExitCritical>
}
 8006bbc:	bf00      	nop
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000c80 	.word	0x20000c80
 8006bc8:	20000c50 	.word	0x20000c50
 8006bcc:	20000c64 	.word	0x20000c64
 8006bd0:	20000c78 	.word	0x20000c78
 8006bd4:	20000c7c 	.word	0x20000c7c
 8006bd8:	20000d2c 	.word	0x20000d2c
 8006bdc:	20000c8c 	.word	0x20000c8c
 8006be0:	08007d00 	.word	0x08007d00

08006be4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3b04      	subs	r3, #4
 8006bf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3b04      	subs	r3, #4
 8006c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3b04      	subs	r3, #4
 8006c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c14:	4a0c      	ldr	r2, [pc, #48]	; (8006c48 <pxPortInitialiseStack+0x64>)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3b14      	subs	r3, #20
 8006c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3b04      	subs	r3, #4
 8006c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f06f 0202 	mvn.w	r2, #2
 8006c32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3b20      	subs	r3, #32
 8006c38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	08006c4d 	.word	0x08006c4d

08006c4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c56:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <prvTaskExitError+0x50>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5e:	d009      	beq.n	8006c74 <prvTaskExitError+0x28>
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e7fe      	b.n	8006c72 <prvTaskExitError+0x26>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c86:	bf00      	nop
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0fc      	beq.n	8006c88 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	2000000c 	.word	0x2000000c

08006ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <pxCurrentTCBConst2>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	6808      	ldr	r0, [r1, #0]
 8006ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	f380 8809 	msr	PSP, r0
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8811 	msr	BASEPRI, r0
 8006cba:	4770      	bx	lr
 8006cbc:	f3af 8000 	nop.w

08006cc0 <pxCurrentTCBConst2>:
 8006cc0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop

08006cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cc8:	4808      	ldr	r0, [pc, #32]	; (8006cec <prvPortStartFirstTask+0x24>)
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f380 8808 	msr	MSP, r0
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f380 8814 	msr	CONTROL, r0
 8006cda:	b662      	cpsie	i
 8006cdc:	b661      	cpsie	f
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	df00      	svc	0
 8006ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cea:	bf00      	nop
 8006cec:	e000ed08 	.word	0xe000ed08

08006cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cf6:	4b44      	ldr	r3, [pc, #272]	; (8006e08 <xPortStartScheduler+0x118>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a44      	ldr	r2, [pc, #272]	; (8006e0c <xPortStartScheduler+0x11c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d109      	bne.n	8006d14 <xPortStartScheduler+0x24>
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	e7fe      	b.n	8006d12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d14:	4b3c      	ldr	r3, [pc, #240]	; (8006e08 <xPortStartScheduler+0x118>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3d      	ldr	r2, [pc, #244]	; (8006e10 <xPortStartScheduler+0x120>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d109      	bne.n	8006d32 <xPortStartScheduler+0x42>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e7fe      	b.n	8006d30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d32:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <xPortStartScheduler+0x124>)
 8006d34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	22ff      	movs	r2, #255	; 0xff
 8006d42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4b30      	ldr	r3, [pc, #192]	; (8006e18 <xPortStartScheduler+0x128>)
 8006d58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d5a:	4b30      	ldr	r3, [pc, #192]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d5c:	2207      	movs	r2, #7
 8006d5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d60:	e009      	b.n	8006d76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006d62:	4b2e      	ldr	r3, [pc, #184]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d0ef      	beq.n	8006d62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d82:	4b26      	ldr	r3, [pc, #152]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1c3 0307 	rsb	r3, r3, #7
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d009      	beq.n	8006da2 <xPortStartScheduler+0xb2>
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
 8006da0:	e7fe      	b.n	8006da0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006da2:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <xPortStartScheduler+0x12c>)
 8006db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a16      	ldr	r2, [pc, #88]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <xPortStartScheduler+0x130>)
 8006dd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006dd8:	f000 f8d6 	bl	8006f88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <xPortStartScheduler+0x134>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006de2:	f000 f8f5 	bl	8006fd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <xPortStartScheduler+0x138>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a0f      	ldr	r2, [pc, #60]	; (8006e28 <xPortStartScheduler+0x138>)
 8006dec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006df0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006df2:	f7ff ff69 	bl	8006cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006df6:	f7ff f871 	bl	8005edc <vTaskSwitchContext>
	prvTaskExitError();
 8006dfa:	f7ff ff27 	bl	8006c4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	e000ed00 	.word	0xe000ed00
 8006e0c:	410fc271 	.word	0x410fc271
 8006e10:	410fc270 	.word	0x410fc270
 8006e14:	e000e400 	.word	0xe000e400
 8006e18:	20000d7c 	.word	0x20000d7c
 8006e1c:	20000d80 	.word	0x20000d80
 8006e20:	e000ed20 	.word	0xe000ed20
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	e000ef34 	.word	0xe000ef34

08006e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <vPortEnterCritical+0x54>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <vPortEnterCritical+0x54>)
 8006e4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <vPortEnterCritical+0x54>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10e      	bne.n	8006e74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e56:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <vPortEnterCritical+0x58>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <vPortEnterCritical+0x48>
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	603b      	str	r3, [r7, #0]
 8006e72:	e7fe      	b.n	8006e72 <vPortEnterCritical+0x46>
	}
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	2000000c 	.word	0x2000000c
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <vPortExitCritical+0x22>
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	e7fe      	b.n	8006ea8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006eb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <vPortExitCritical+0x4c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <vPortExitCritical+0x3e>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	2000000c 	.word	0x2000000c
	...

08006ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ee0:	f3ef 8009 	mrs	r0, PSP
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <pxCurrentTCBConst>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	f01e 0f10 	tst.w	lr, #16
 8006ef0:	bf08      	it	eq
 8006ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efa:	6010      	str	r0, [r2, #0]
 8006efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f04:	f380 8811 	msr	BASEPRI, r0
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f7fe ffe4 	bl	8005edc <vTaskSwitchContext>
 8006f14:	f04f 0000 	mov.w	r0, #0
 8006f18:	f380 8811 	msr	BASEPRI, r0
 8006f1c:	bc09      	pop	{r0, r3}
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	6808      	ldr	r0, [r1, #0]
 8006f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f26:	f01e 0f10 	tst.w	lr, #16
 8006f2a:	bf08      	it	eq
 8006f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f30:	f380 8809 	msr	PSP, r0
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w

08006f40 <pxCurrentTCBConst>:
 8006f40:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop

08006f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f60:	f7fe ff04 	bl	8005d6c <xTaskIncrementTick>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <SysTick_Handler+0x3c>)
 8006f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <vPortSetupTimerInterrupt+0x34>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <vPortSetupTimerInterrupt+0x38>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <vPortSetupTimerInterrupt+0x3c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a0a      	ldr	r2, [pc, #40]	; (8006fc8 <vPortSetupTimerInterrupt+0x40>)
 8006f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <vPortSetupTimerInterrupt+0x44>)
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <vPortSetupTimerInterrupt+0x34>)
 8006fac:	2207      	movs	r2, #7
 8006fae:	601a      	str	r2, [r3, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	e000e010 	.word	0xe000e010
 8006fc0:	e000e018 	.word	0xe000e018
 8006fc4:	20000000 	.word	0x20000000
 8006fc8:	10624dd3 	.word	0x10624dd3
 8006fcc:	e000e014 	.word	0xe000e014

08006fd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fe0 <vPortEnableVFP+0x10>
 8006fd4:	6801      	ldr	r1, [r0, #0]
 8006fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fda:	6001      	str	r1, [r0, #0]
 8006fdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fde:	bf00      	nop
 8006fe0:	e000ed88 	.word	0xe000ed88

08006fe4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fea:	f3ef 8305 	mrs	r3, IPSR
 8006fee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b0f      	cmp	r3, #15
 8006ff4:	d913      	bls.n	800701e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ff6:	4a16      	ldr	r2, [pc, #88]	; (8007050 <vPortValidateInterruptPriority+0x6c>)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007000:	4b14      	ldr	r3, [pc, #80]	; (8007054 <vPortValidateInterruptPriority+0x70>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	7afa      	ldrb	r2, [r7, #11]
 8007006:	429a      	cmp	r2, r3
 8007008:	d209      	bcs.n	800701e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	e7fe      	b.n	800701c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800701e:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <vPortValidateInterruptPriority+0x74>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007026:	4b0d      	ldr	r3, [pc, #52]	; (800705c <vPortValidateInterruptPriority+0x78>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d909      	bls.n	8007042 <vPortValidateInterruptPriority+0x5e>
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	e7fe      	b.n	8007040 <vPortValidateInterruptPriority+0x5c>
	}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	e000e3f0 	.word	0xe000e3f0
 8007054:	20000d7c 	.word	0x20000d7c
 8007058:	e000ed0c 	.word	0xe000ed0c
 800705c:	20000d80 	.word	0x20000d80

08007060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	; 0x28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800706c:	f7fe fdc4 	bl	8005bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007070:	4b57      	ldr	r3, [pc, #348]	; (80071d0 <pvPortMalloc+0x170>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007078:	f000 f90c 	bl	8007294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800707c:	4b55      	ldr	r3, [pc, #340]	; (80071d4 <pvPortMalloc+0x174>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	f040 808c 	bne.w	80071a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01c      	beq.n	80070ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007090:	2208      	movs	r2, #8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d013      	beq.n	80070ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f023 0307 	bic.w	r3, r3, #7
 80070a8:	3308      	adds	r3, #8
 80070aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <pvPortMalloc+0x6a>
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e7fe      	b.n	80070c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d068      	beq.n	80071a2 <pvPortMalloc+0x142>
 80070d0:	4b41      	ldr	r3, [pc, #260]	; (80071d8 <pvPortMalloc+0x178>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d863      	bhi.n	80071a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070da:	4b40      	ldr	r3, [pc, #256]	; (80071dc <pvPortMalloc+0x17c>)
 80070dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070de:	4b3f      	ldr	r3, [pc, #252]	; (80071dc <pvPortMalloc+0x17c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070e4:	e004      	b.n	80070f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d903      	bls.n	8007102 <pvPortMalloc+0xa2>
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f1      	bne.n	80070e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007102:	4b33      	ldr	r3, [pc, #204]	; (80071d0 <pvPortMalloc+0x170>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007108:	429a      	cmp	r2, r3
 800710a:	d04a      	beq.n	80071a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2208      	movs	r2, #8
 8007112:	4413      	add	r3, r2
 8007114:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	2308      	movs	r3, #8
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	429a      	cmp	r2, r3
 800712c:	d91e      	bls.n	800716c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800712e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4413      	add	r3, r2
 8007134:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <pvPortMalloc+0xf4>
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	e7fe      	b.n	8007152 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007166:	69b8      	ldr	r0, [r7, #24]
 8007168:	f000 f8f6 	bl	8007358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800716c:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <pvPortMalloc+0x178>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <pvPortMalloc+0x178>)
 8007178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800717a:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <pvPortMalloc+0x178>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b18      	ldr	r3, [pc, #96]	; (80071e0 <pvPortMalloc+0x180>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d203      	bcs.n	800718e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <pvPortMalloc+0x178>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <pvPortMalloc+0x180>)
 800718c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	4b10      	ldr	r3, [pc, #64]	; (80071d4 <pvPortMalloc+0x174>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	431a      	orrs	r2, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071a2:	f7fe fd37 	bl	8005c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d009      	beq.n	80071c4 <pvPortMalloc+0x164>
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	e7fe      	b.n	80071c2 <pvPortMalloc+0x162>
	return pvReturn;
 80071c4:	69fb      	ldr	r3, [r7, #28]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3728      	adds	r7, #40	; 0x28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	2000498c 	.word	0x2000498c
 80071d4:	20004998 	.word	0x20004998
 80071d8:	20004990 	.word	0x20004990
 80071dc:	20004984 	.word	0x20004984
 80071e0:	20004994 	.word	0x20004994

080071e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d046      	beq.n	8007284 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071f6:	2308      	movs	r3, #8
 80071f8:	425b      	negs	r3, r3
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4413      	add	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	4b20      	ldr	r3, [pc, #128]	; (800728c <vPortFree+0xa8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <vPortFree+0x42>
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e7fe      	b.n	8007224 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <vPortFree+0x5e>
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	e7fe      	b.n	8007240 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	4b11      	ldr	r3, [pc, #68]	; (800728c <vPortFree+0xa8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d019      	beq.n	8007284 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d115      	bne.n	8007284 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <vPortFree+0xa8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007268:	f7fe fcc6 	bl	8005bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <vPortFree+0xac>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4413      	add	r3, r2
 8007276:	4a06      	ldr	r2, [pc, #24]	; (8007290 <vPortFree+0xac>)
 8007278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800727a:	6938      	ldr	r0, [r7, #16]
 800727c:	f000 f86c 	bl	8007358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007280:	f7fe fcc8 	bl	8005c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007284:	bf00      	nop
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20004998 	.word	0x20004998
 8007290:	20004990 	.word	0x20004990

08007294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800729a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800729e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072a0:	4b27      	ldr	r3, [pc, #156]	; (8007340 <prvHeapInit+0xac>)
 80072a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00c      	beq.n	80072c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3307      	adds	r3, #7
 80072b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0307 	bic.w	r3, r3, #7
 80072ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	4a1f      	ldr	r2, [pc, #124]	; (8007340 <prvHeapInit+0xac>)
 80072c4:	4413      	add	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072cc:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <prvHeapInit+0xb0>)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <prvHeapInit+0xb0>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4413      	add	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072e0:	2208      	movs	r2, #8
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0307 	bic.w	r3, r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4a15      	ldr	r2, [pc, #84]	; (8007348 <prvHeapInit+0xb4>)
 80072f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <prvHeapInit+0xb4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <prvHeapInit+0xb4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007314:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <prvHeapInit+0xb4>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <prvHeapInit+0xb8>)
 8007322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <prvHeapInit+0xbc>)
 800732a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <prvHeapInit+0xc0>)
 800732e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007332:	601a      	str	r2, [r3, #0]
}
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	20000d84 	.word	0x20000d84
 8007344:	20004984 	.word	0x20004984
 8007348:	2000498c 	.word	0x2000498c
 800734c:	20004994 	.word	0x20004994
 8007350:	20004990 	.word	0x20004990
 8007354:	20004998 	.word	0x20004998

08007358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007360:	4b28      	ldr	r3, [pc, #160]	; (8007404 <prvInsertBlockIntoFreeList+0xac>)
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e002      	b.n	800736c <prvInsertBlockIntoFreeList+0x14>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d8f7      	bhi.n	8007366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	4413      	add	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d108      	bne.n	800739a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	441a      	add	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d118      	bne.n	80073e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <prvInsertBlockIntoFreeList+0xb0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d00d      	beq.n	80073d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	441a      	add	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e008      	b.n	80073e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <prvInsertBlockIntoFreeList+0xb0>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e003      	b.n	80073e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d002      	beq.n	80073f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20004984 	.word	0x20004984
 8007408:	2000498c 	.word	0x2000498c

0800740c <__errno>:
 800740c:	4b01      	ldr	r3, [pc, #4]	; (8007414 <__errno+0x8>)
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000010 	.word	0x20000010

08007418 <__libc_init_array>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4e0d      	ldr	r6, [pc, #52]	; (8007450 <__libc_init_array+0x38>)
 800741c:	4c0d      	ldr	r4, [pc, #52]	; (8007454 <__libc_init_array+0x3c>)
 800741e:	1ba4      	subs	r4, r4, r6
 8007420:	10a4      	asrs	r4, r4, #2
 8007422:	2500      	movs	r5, #0
 8007424:	42a5      	cmp	r5, r4
 8007426:	d109      	bne.n	800743c <__libc_init_array+0x24>
 8007428:	4e0b      	ldr	r6, [pc, #44]	; (8007458 <__libc_init_array+0x40>)
 800742a:	4c0c      	ldr	r4, [pc, #48]	; (800745c <__libc_init_array+0x44>)
 800742c:	f000 fc28 	bl	8007c80 <_init>
 8007430:	1ba4      	subs	r4, r4, r6
 8007432:	10a4      	asrs	r4, r4, #2
 8007434:	2500      	movs	r5, #0
 8007436:	42a5      	cmp	r5, r4
 8007438:	d105      	bne.n	8007446 <__libc_init_array+0x2e>
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007440:	4798      	blx	r3
 8007442:	3501      	adds	r5, #1
 8007444:	e7ee      	b.n	8007424 <__libc_init_array+0xc>
 8007446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800744a:	4798      	blx	r3
 800744c:	3501      	adds	r5, #1
 800744e:	e7f2      	b.n	8007436 <__libc_init_array+0x1e>
 8007450:	08007db4 	.word	0x08007db4
 8007454:	08007db4 	.word	0x08007db4
 8007458:	08007db4 	.word	0x08007db4
 800745c:	08007db8 	.word	0x08007db8

08007460 <memcpy>:
 8007460:	b510      	push	{r4, lr}
 8007462:	1e43      	subs	r3, r0, #1
 8007464:	440a      	add	r2, r1
 8007466:	4291      	cmp	r1, r2
 8007468:	d100      	bne.n	800746c <memcpy+0xc>
 800746a:	bd10      	pop	{r4, pc}
 800746c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007474:	e7f7      	b.n	8007466 <memcpy+0x6>

08007476 <memset>:
 8007476:	4402      	add	r2, r0
 8007478:	4603      	mov	r3, r0
 800747a:	4293      	cmp	r3, r2
 800747c:	d100      	bne.n	8007480 <memset+0xa>
 800747e:	4770      	bx	lr
 8007480:	f803 1b01 	strb.w	r1, [r3], #1
 8007484:	e7f9      	b.n	800747a <memset+0x4>
	...

08007488 <siprintf>:
 8007488:	b40e      	push	{r1, r2, r3}
 800748a:	b500      	push	{lr}
 800748c:	b09c      	sub	sp, #112	; 0x70
 800748e:	ab1d      	add	r3, sp, #116	; 0x74
 8007490:	9002      	str	r0, [sp, #8]
 8007492:	9006      	str	r0, [sp, #24]
 8007494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007498:	4809      	ldr	r0, [pc, #36]	; (80074c0 <siprintf+0x38>)
 800749a:	9107      	str	r1, [sp, #28]
 800749c:	9104      	str	r1, [sp, #16]
 800749e:	4909      	ldr	r1, [pc, #36]	; (80074c4 <siprintf+0x3c>)
 80074a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a4:	9105      	str	r1, [sp, #20]
 80074a6:	6800      	ldr	r0, [r0, #0]
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	a902      	add	r1, sp, #8
 80074ac:	f000 f866 	bl	800757c <_svfiprintf_r>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	b01c      	add	sp, #112	; 0x70
 80074b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074bc:	b003      	add	sp, #12
 80074be:	4770      	bx	lr
 80074c0:	20000010 	.word	0x20000010
 80074c4:	ffff0208 	.word	0xffff0208

080074c8 <__ssputs_r>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	688e      	ldr	r6, [r1, #8]
 80074ce:	429e      	cmp	r6, r3
 80074d0:	4682      	mov	sl, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4690      	mov	r8, r2
 80074d6:	4699      	mov	r9, r3
 80074d8:	d837      	bhi.n	800754a <__ssputs_r+0x82>
 80074da:	898a      	ldrh	r2, [r1, #12]
 80074dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074e0:	d031      	beq.n	8007546 <__ssputs_r+0x7e>
 80074e2:	6825      	ldr	r5, [r4, #0]
 80074e4:	6909      	ldr	r1, [r1, #16]
 80074e6:	1a6f      	subs	r7, r5, r1
 80074e8:	6965      	ldr	r5, [r4, #20]
 80074ea:	2302      	movs	r3, #2
 80074ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80074f4:	f109 0301 	add.w	r3, r9, #1
 80074f8:	443b      	add	r3, r7
 80074fa:	429d      	cmp	r5, r3
 80074fc:	bf38      	it	cc
 80074fe:	461d      	movcc	r5, r3
 8007500:	0553      	lsls	r3, r2, #21
 8007502:	d530      	bpl.n	8007566 <__ssputs_r+0x9e>
 8007504:	4629      	mov	r1, r5
 8007506:	f000 fb21 	bl	8007b4c <_malloc_r>
 800750a:	4606      	mov	r6, r0
 800750c:	b950      	cbnz	r0, 8007524 <__ssputs_r+0x5c>
 800750e:	230c      	movs	r3, #12
 8007510:	f8ca 3000 	str.w	r3, [sl]
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007524:	463a      	mov	r2, r7
 8007526:	6921      	ldr	r1, [r4, #16]
 8007528:	f7ff ff9a 	bl	8007460 <memcpy>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	6126      	str	r6, [r4, #16]
 800753a:	6165      	str	r5, [r4, #20]
 800753c:	443e      	add	r6, r7
 800753e:	1bed      	subs	r5, r5, r7
 8007540:	6026      	str	r6, [r4, #0]
 8007542:	60a5      	str	r5, [r4, #8]
 8007544:	464e      	mov	r6, r9
 8007546:	454e      	cmp	r6, r9
 8007548:	d900      	bls.n	800754c <__ssputs_r+0x84>
 800754a:	464e      	mov	r6, r9
 800754c:	4632      	mov	r2, r6
 800754e:	4641      	mov	r1, r8
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	f000 fa93 	bl	8007a7c <memmove>
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	1b9b      	subs	r3, r3, r6
 800755a:	60a3      	str	r3, [r4, #8]
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	441e      	add	r6, r3
 8007560:	6026      	str	r6, [r4, #0]
 8007562:	2000      	movs	r0, #0
 8007564:	e7dc      	b.n	8007520 <__ssputs_r+0x58>
 8007566:	462a      	mov	r2, r5
 8007568:	f000 fb4a 	bl	8007c00 <_realloc_r>
 800756c:	4606      	mov	r6, r0
 800756e:	2800      	cmp	r0, #0
 8007570:	d1e2      	bne.n	8007538 <__ssputs_r+0x70>
 8007572:	6921      	ldr	r1, [r4, #16]
 8007574:	4650      	mov	r0, sl
 8007576:	f000 fa9b 	bl	8007ab0 <_free_r>
 800757a:	e7c8      	b.n	800750e <__ssputs_r+0x46>

0800757c <_svfiprintf_r>:
 800757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	461d      	mov	r5, r3
 8007582:	898b      	ldrh	r3, [r1, #12]
 8007584:	061f      	lsls	r7, r3, #24
 8007586:	b09d      	sub	sp, #116	; 0x74
 8007588:	4680      	mov	r8, r0
 800758a:	460c      	mov	r4, r1
 800758c:	4616      	mov	r6, r2
 800758e:	d50f      	bpl.n	80075b0 <_svfiprintf_r+0x34>
 8007590:	690b      	ldr	r3, [r1, #16]
 8007592:	b96b      	cbnz	r3, 80075b0 <_svfiprintf_r+0x34>
 8007594:	2140      	movs	r1, #64	; 0x40
 8007596:	f000 fad9 	bl	8007b4c <_malloc_r>
 800759a:	6020      	str	r0, [r4, #0]
 800759c:	6120      	str	r0, [r4, #16]
 800759e:	b928      	cbnz	r0, 80075ac <_svfiprintf_r+0x30>
 80075a0:	230c      	movs	r3, #12
 80075a2:	f8c8 3000 	str.w	r3, [r8]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	e0c8      	b.n	800773e <_svfiprintf_r+0x1c2>
 80075ac:	2340      	movs	r3, #64	; 0x40
 80075ae:	6163      	str	r3, [r4, #20]
 80075b0:	2300      	movs	r3, #0
 80075b2:	9309      	str	r3, [sp, #36]	; 0x24
 80075b4:	2320      	movs	r3, #32
 80075b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075ba:	2330      	movs	r3, #48	; 0x30
 80075bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075c0:	9503      	str	r5, [sp, #12]
 80075c2:	f04f 0b01 	mov.w	fp, #1
 80075c6:	4637      	mov	r7, r6
 80075c8:	463d      	mov	r5, r7
 80075ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075ce:	b10b      	cbz	r3, 80075d4 <_svfiprintf_r+0x58>
 80075d0:	2b25      	cmp	r3, #37	; 0x25
 80075d2:	d13e      	bne.n	8007652 <_svfiprintf_r+0xd6>
 80075d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80075d8:	d00b      	beq.n	80075f2 <_svfiprintf_r+0x76>
 80075da:	4653      	mov	r3, sl
 80075dc:	4632      	mov	r2, r6
 80075de:	4621      	mov	r1, r4
 80075e0:	4640      	mov	r0, r8
 80075e2:	f7ff ff71 	bl	80074c8 <__ssputs_r>
 80075e6:	3001      	adds	r0, #1
 80075e8:	f000 80a4 	beq.w	8007734 <_svfiprintf_r+0x1b8>
 80075ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ee:	4453      	add	r3, sl
 80075f0:	9309      	str	r3, [sp, #36]	; 0x24
 80075f2:	783b      	ldrb	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 809d 	beq.w	8007734 <_svfiprintf_r+0x1b8>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	9307      	str	r3, [sp, #28]
 8007608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800760c:	931a      	str	r3, [sp, #104]	; 0x68
 800760e:	462f      	mov	r7, r5
 8007610:	2205      	movs	r2, #5
 8007612:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007616:	4850      	ldr	r0, [pc, #320]	; (8007758 <_svfiprintf_r+0x1dc>)
 8007618:	f7f8 fdea 	bl	80001f0 <memchr>
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	b9d0      	cbnz	r0, 8007656 <_svfiprintf_r+0xda>
 8007620:	06d9      	lsls	r1, r3, #27
 8007622:	bf44      	itt	mi
 8007624:	2220      	movmi	r2, #32
 8007626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800762a:	071a      	lsls	r2, r3, #28
 800762c:	bf44      	itt	mi
 800762e:	222b      	movmi	r2, #43	; 0x2b
 8007630:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007634:	782a      	ldrb	r2, [r5, #0]
 8007636:	2a2a      	cmp	r2, #42	; 0x2a
 8007638:	d015      	beq.n	8007666 <_svfiprintf_r+0xea>
 800763a:	9a07      	ldr	r2, [sp, #28]
 800763c:	462f      	mov	r7, r5
 800763e:	2000      	movs	r0, #0
 8007640:	250a      	movs	r5, #10
 8007642:	4639      	mov	r1, r7
 8007644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007648:	3b30      	subs	r3, #48	; 0x30
 800764a:	2b09      	cmp	r3, #9
 800764c:	d94d      	bls.n	80076ea <_svfiprintf_r+0x16e>
 800764e:	b1b8      	cbz	r0, 8007680 <_svfiprintf_r+0x104>
 8007650:	e00f      	b.n	8007672 <_svfiprintf_r+0xf6>
 8007652:	462f      	mov	r7, r5
 8007654:	e7b8      	b.n	80075c8 <_svfiprintf_r+0x4c>
 8007656:	4a40      	ldr	r2, [pc, #256]	; (8007758 <_svfiprintf_r+0x1dc>)
 8007658:	1a80      	subs	r0, r0, r2
 800765a:	fa0b f000 	lsl.w	r0, fp, r0
 800765e:	4318      	orrs	r0, r3
 8007660:	9004      	str	r0, [sp, #16]
 8007662:	463d      	mov	r5, r7
 8007664:	e7d3      	b.n	800760e <_svfiprintf_r+0x92>
 8007666:	9a03      	ldr	r2, [sp, #12]
 8007668:	1d11      	adds	r1, r2, #4
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	9103      	str	r1, [sp, #12]
 800766e:	2a00      	cmp	r2, #0
 8007670:	db01      	blt.n	8007676 <_svfiprintf_r+0xfa>
 8007672:	9207      	str	r2, [sp, #28]
 8007674:	e004      	b.n	8007680 <_svfiprintf_r+0x104>
 8007676:	4252      	negs	r2, r2
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	9207      	str	r2, [sp, #28]
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	783b      	ldrb	r3, [r7, #0]
 8007682:	2b2e      	cmp	r3, #46	; 0x2e
 8007684:	d10c      	bne.n	80076a0 <_svfiprintf_r+0x124>
 8007686:	787b      	ldrb	r3, [r7, #1]
 8007688:	2b2a      	cmp	r3, #42	; 0x2a
 800768a:	d133      	bne.n	80076f4 <_svfiprintf_r+0x178>
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	1d1a      	adds	r2, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	9203      	str	r2, [sp, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfb8      	it	lt
 8007698:	f04f 33ff 	movlt.w	r3, #4294967295
 800769c:	3702      	adds	r7, #2
 800769e:	9305      	str	r3, [sp, #20]
 80076a0:	4d2e      	ldr	r5, [pc, #184]	; (800775c <_svfiprintf_r+0x1e0>)
 80076a2:	7839      	ldrb	r1, [r7, #0]
 80076a4:	2203      	movs	r2, #3
 80076a6:	4628      	mov	r0, r5
 80076a8:	f7f8 fda2 	bl	80001f0 <memchr>
 80076ac:	b138      	cbz	r0, 80076be <_svfiprintf_r+0x142>
 80076ae:	2340      	movs	r3, #64	; 0x40
 80076b0:	1b40      	subs	r0, r0, r5
 80076b2:	fa03 f000 	lsl.w	r0, r3, r0
 80076b6:	9b04      	ldr	r3, [sp, #16]
 80076b8:	4303      	orrs	r3, r0
 80076ba:	3701      	adds	r7, #1
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	7839      	ldrb	r1, [r7, #0]
 80076c0:	4827      	ldr	r0, [pc, #156]	; (8007760 <_svfiprintf_r+0x1e4>)
 80076c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c6:	2206      	movs	r2, #6
 80076c8:	1c7e      	adds	r6, r7, #1
 80076ca:	f7f8 fd91 	bl	80001f0 <memchr>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d038      	beq.n	8007744 <_svfiprintf_r+0x1c8>
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <_svfiprintf_r+0x1e8>)
 80076d4:	bb13      	cbnz	r3, 800771c <_svfiprintf_r+0x1a0>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	3307      	adds	r3, #7
 80076da:	f023 0307 	bic.w	r3, r3, #7
 80076de:	3308      	adds	r3, #8
 80076e0:	9303      	str	r3, [sp, #12]
 80076e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e4:	444b      	add	r3, r9
 80076e6:	9309      	str	r3, [sp, #36]	; 0x24
 80076e8:	e76d      	b.n	80075c6 <_svfiprintf_r+0x4a>
 80076ea:	fb05 3202 	mla	r2, r5, r2, r3
 80076ee:	2001      	movs	r0, #1
 80076f0:	460f      	mov	r7, r1
 80076f2:	e7a6      	b.n	8007642 <_svfiprintf_r+0xc6>
 80076f4:	2300      	movs	r3, #0
 80076f6:	3701      	adds	r7, #1
 80076f8:	9305      	str	r3, [sp, #20]
 80076fa:	4619      	mov	r1, r3
 80076fc:	250a      	movs	r5, #10
 80076fe:	4638      	mov	r0, r7
 8007700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007704:	3a30      	subs	r2, #48	; 0x30
 8007706:	2a09      	cmp	r2, #9
 8007708:	d903      	bls.n	8007712 <_svfiprintf_r+0x196>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0c8      	beq.n	80076a0 <_svfiprintf_r+0x124>
 800770e:	9105      	str	r1, [sp, #20]
 8007710:	e7c6      	b.n	80076a0 <_svfiprintf_r+0x124>
 8007712:	fb05 2101 	mla	r1, r5, r1, r2
 8007716:	2301      	movs	r3, #1
 8007718:	4607      	mov	r7, r0
 800771a:	e7f0      	b.n	80076fe <_svfiprintf_r+0x182>
 800771c:	ab03      	add	r3, sp, #12
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4622      	mov	r2, r4
 8007722:	4b11      	ldr	r3, [pc, #68]	; (8007768 <_svfiprintf_r+0x1ec>)
 8007724:	a904      	add	r1, sp, #16
 8007726:	4640      	mov	r0, r8
 8007728:	f3af 8000 	nop.w
 800772c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007730:	4681      	mov	r9, r0
 8007732:	d1d6      	bne.n	80076e2 <_svfiprintf_r+0x166>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	065b      	lsls	r3, r3, #25
 8007738:	f53f af35 	bmi.w	80075a6 <_svfiprintf_r+0x2a>
 800773c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800773e:	b01d      	add	sp, #116	; 0x74
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	ab03      	add	r3, sp, #12
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4622      	mov	r2, r4
 800774a:	4b07      	ldr	r3, [pc, #28]	; (8007768 <_svfiprintf_r+0x1ec>)
 800774c:	a904      	add	r1, sp, #16
 800774e:	4640      	mov	r0, r8
 8007750:	f000 f882 	bl	8007858 <_printf_i>
 8007754:	e7ea      	b.n	800772c <_svfiprintf_r+0x1b0>
 8007756:	bf00      	nop
 8007758:	08007d78 	.word	0x08007d78
 800775c:	08007d7e 	.word	0x08007d7e
 8007760:	08007d82 	.word	0x08007d82
 8007764:	00000000 	.word	0x00000000
 8007768:	080074c9 	.word	0x080074c9

0800776c <_printf_common>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	4691      	mov	r9, r2
 8007772:	461f      	mov	r7, r3
 8007774:	688a      	ldr	r2, [r1, #8]
 8007776:	690b      	ldr	r3, [r1, #16]
 8007778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800777c:	4293      	cmp	r3, r2
 800777e:	bfb8      	it	lt
 8007780:	4613      	movlt	r3, r2
 8007782:	f8c9 3000 	str.w	r3, [r9]
 8007786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800778a:	4606      	mov	r6, r0
 800778c:	460c      	mov	r4, r1
 800778e:	b112      	cbz	r2, 8007796 <_printf_common+0x2a>
 8007790:	3301      	adds	r3, #1
 8007792:	f8c9 3000 	str.w	r3, [r9]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	0699      	lsls	r1, r3, #26
 800779a:	bf42      	ittt	mi
 800779c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077a0:	3302      	addmi	r3, #2
 80077a2:	f8c9 3000 	strmi.w	r3, [r9]
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	f015 0506 	ands.w	r5, r5, #6
 80077ac:	d107      	bne.n	80077be <_printf_common+0x52>
 80077ae:	f104 0a19 	add.w	sl, r4, #25
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	f8d9 2000 	ldr.w	r2, [r9]
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	42ab      	cmp	r3, r5
 80077bc:	dc28      	bgt.n	8007810 <_printf_common+0xa4>
 80077be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	3300      	adds	r3, #0
 80077c6:	bf18      	it	ne
 80077c8:	2301      	movne	r3, #1
 80077ca:	0692      	lsls	r2, r2, #26
 80077cc:	d42d      	bmi.n	800782a <_printf_common+0xbe>
 80077ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d2:	4639      	mov	r1, r7
 80077d4:	4630      	mov	r0, r6
 80077d6:	47c0      	blx	r8
 80077d8:	3001      	adds	r0, #1
 80077da:	d020      	beq.n	800781e <_printf_common+0xb2>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	68e5      	ldr	r5, [r4, #12]
 80077e0:	f8d9 2000 	ldr.w	r2, [r9]
 80077e4:	f003 0306 	and.w	r3, r3, #6
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	bf08      	it	eq
 80077ec:	1aad      	subeq	r5, r5, r2
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	bf0c      	ite	eq
 80077f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f8:	2500      	movne	r5, #0
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bfc4      	itt	gt
 80077fe:	1a9b      	subgt	r3, r3, r2
 8007800:	18ed      	addgt	r5, r5, r3
 8007802:	f04f 0900 	mov.w	r9, #0
 8007806:	341a      	adds	r4, #26
 8007808:	454d      	cmp	r5, r9
 800780a:	d11a      	bne.n	8007842 <_printf_common+0xd6>
 800780c:	2000      	movs	r0, #0
 800780e:	e008      	b.n	8007822 <_printf_common+0xb6>
 8007810:	2301      	movs	r3, #1
 8007812:	4652      	mov	r2, sl
 8007814:	4639      	mov	r1, r7
 8007816:	4630      	mov	r0, r6
 8007818:	47c0      	blx	r8
 800781a:	3001      	adds	r0, #1
 800781c:	d103      	bne.n	8007826 <_printf_common+0xba>
 800781e:	f04f 30ff 	mov.w	r0, #4294967295
 8007822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007826:	3501      	adds	r5, #1
 8007828:	e7c3      	b.n	80077b2 <_printf_common+0x46>
 800782a:	18e1      	adds	r1, r4, r3
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	2030      	movs	r0, #48	; 0x30
 8007830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007834:	4422      	add	r2, r4
 8007836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800783a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800783e:	3302      	adds	r3, #2
 8007840:	e7c5      	b.n	80077ce <_printf_common+0x62>
 8007842:	2301      	movs	r3, #1
 8007844:	4622      	mov	r2, r4
 8007846:	4639      	mov	r1, r7
 8007848:	4630      	mov	r0, r6
 800784a:	47c0      	blx	r8
 800784c:	3001      	adds	r0, #1
 800784e:	d0e6      	beq.n	800781e <_printf_common+0xb2>
 8007850:	f109 0901 	add.w	r9, r9, #1
 8007854:	e7d8      	b.n	8007808 <_printf_common+0x9c>
	...

08007858 <_printf_i>:
 8007858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800785c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007860:	460c      	mov	r4, r1
 8007862:	7e09      	ldrb	r1, [r1, #24]
 8007864:	b085      	sub	sp, #20
 8007866:	296e      	cmp	r1, #110	; 0x6e
 8007868:	4617      	mov	r7, r2
 800786a:	4606      	mov	r6, r0
 800786c:	4698      	mov	r8, r3
 800786e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007870:	f000 80b3 	beq.w	80079da <_printf_i+0x182>
 8007874:	d822      	bhi.n	80078bc <_printf_i+0x64>
 8007876:	2963      	cmp	r1, #99	; 0x63
 8007878:	d036      	beq.n	80078e8 <_printf_i+0x90>
 800787a:	d80a      	bhi.n	8007892 <_printf_i+0x3a>
 800787c:	2900      	cmp	r1, #0
 800787e:	f000 80b9 	beq.w	80079f4 <_printf_i+0x19c>
 8007882:	2958      	cmp	r1, #88	; 0x58
 8007884:	f000 8083 	beq.w	800798e <_printf_i+0x136>
 8007888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800788c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007890:	e032      	b.n	80078f8 <_printf_i+0xa0>
 8007892:	2964      	cmp	r1, #100	; 0x64
 8007894:	d001      	beq.n	800789a <_printf_i+0x42>
 8007896:	2969      	cmp	r1, #105	; 0x69
 8007898:	d1f6      	bne.n	8007888 <_printf_i+0x30>
 800789a:	6820      	ldr	r0, [r4, #0]
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	0605      	lsls	r5, r0, #24
 80078a0:	f103 0104 	add.w	r1, r3, #4
 80078a4:	d52a      	bpl.n	80078fc <_printf_i+0xa4>
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	da03      	bge.n	80078b6 <_printf_i+0x5e>
 80078ae:	222d      	movs	r2, #45	; 0x2d
 80078b0:	425b      	negs	r3, r3
 80078b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078b6:	486f      	ldr	r0, [pc, #444]	; (8007a74 <_printf_i+0x21c>)
 80078b8:	220a      	movs	r2, #10
 80078ba:	e039      	b.n	8007930 <_printf_i+0xd8>
 80078bc:	2973      	cmp	r1, #115	; 0x73
 80078be:	f000 809d 	beq.w	80079fc <_printf_i+0x1a4>
 80078c2:	d808      	bhi.n	80078d6 <_printf_i+0x7e>
 80078c4:	296f      	cmp	r1, #111	; 0x6f
 80078c6:	d020      	beq.n	800790a <_printf_i+0xb2>
 80078c8:	2970      	cmp	r1, #112	; 0x70
 80078ca:	d1dd      	bne.n	8007888 <_printf_i+0x30>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	f043 0320 	orr.w	r3, r3, #32
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	e003      	b.n	80078de <_printf_i+0x86>
 80078d6:	2975      	cmp	r1, #117	; 0x75
 80078d8:	d017      	beq.n	800790a <_printf_i+0xb2>
 80078da:	2978      	cmp	r1, #120	; 0x78
 80078dc:	d1d4      	bne.n	8007888 <_printf_i+0x30>
 80078de:	2378      	movs	r3, #120	; 0x78
 80078e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078e4:	4864      	ldr	r0, [pc, #400]	; (8007a78 <_printf_i+0x220>)
 80078e6:	e055      	b.n	8007994 <_printf_i+0x13c>
 80078e8:	6813      	ldr	r3, [r2, #0]
 80078ea:	1d19      	adds	r1, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6011      	str	r1, [r2, #0]
 80078f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078f8:	2301      	movs	r3, #1
 80078fa:	e08c      	b.n	8007a16 <_printf_i+0x1be>
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6011      	str	r1, [r2, #0]
 8007900:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007904:	bf18      	it	ne
 8007906:	b21b      	sxthne	r3, r3
 8007908:	e7cf      	b.n	80078aa <_printf_i+0x52>
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	6825      	ldr	r5, [r4, #0]
 800790e:	1d18      	adds	r0, r3, #4
 8007910:	6010      	str	r0, [r2, #0]
 8007912:	0628      	lsls	r0, r5, #24
 8007914:	d501      	bpl.n	800791a <_printf_i+0xc2>
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	e002      	b.n	8007920 <_printf_i+0xc8>
 800791a:	0668      	lsls	r0, r5, #25
 800791c:	d5fb      	bpl.n	8007916 <_printf_i+0xbe>
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	4854      	ldr	r0, [pc, #336]	; (8007a74 <_printf_i+0x21c>)
 8007922:	296f      	cmp	r1, #111	; 0x6f
 8007924:	bf14      	ite	ne
 8007926:	220a      	movne	r2, #10
 8007928:	2208      	moveq	r2, #8
 800792a:	2100      	movs	r1, #0
 800792c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007930:	6865      	ldr	r5, [r4, #4]
 8007932:	60a5      	str	r5, [r4, #8]
 8007934:	2d00      	cmp	r5, #0
 8007936:	f2c0 8095 	blt.w	8007a64 <_printf_i+0x20c>
 800793a:	6821      	ldr	r1, [r4, #0]
 800793c:	f021 0104 	bic.w	r1, r1, #4
 8007940:	6021      	str	r1, [r4, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d13d      	bne.n	80079c2 <_printf_i+0x16a>
 8007946:	2d00      	cmp	r5, #0
 8007948:	f040 808e 	bne.w	8007a68 <_printf_i+0x210>
 800794c:	4665      	mov	r5, ip
 800794e:	2a08      	cmp	r2, #8
 8007950:	d10b      	bne.n	800796a <_printf_i+0x112>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	07db      	lsls	r3, r3, #31
 8007956:	d508      	bpl.n	800796a <_printf_i+0x112>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	6862      	ldr	r2, [r4, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	bfde      	ittt	le
 8007960:	2330      	movle	r3, #48	; 0x30
 8007962:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007966:	f105 35ff 	addle.w	r5, r5, #4294967295
 800796a:	ebac 0305 	sub.w	r3, ip, r5
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	f8cd 8000 	str.w	r8, [sp]
 8007974:	463b      	mov	r3, r7
 8007976:	aa03      	add	r2, sp, #12
 8007978:	4621      	mov	r1, r4
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff fef6 	bl	800776c <_printf_common>
 8007980:	3001      	adds	r0, #1
 8007982:	d14d      	bne.n	8007a20 <_printf_i+0x1c8>
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	b005      	add	sp, #20
 800798a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800798e:	4839      	ldr	r0, [pc, #228]	; (8007a74 <_printf_i+0x21c>)
 8007990:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007994:	6813      	ldr	r3, [r2, #0]
 8007996:	6821      	ldr	r1, [r4, #0]
 8007998:	1d1d      	adds	r5, r3, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6015      	str	r5, [r2, #0]
 800799e:	060a      	lsls	r2, r1, #24
 80079a0:	d50b      	bpl.n	80079ba <_printf_i+0x162>
 80079a2:	07ca      	lsls	r2, r1, #31
 80079a4:	bf44      	itt	mi
 80079a6:	f041 0120 	orrmi.w	r1, r1, #32
 80079aa:	6021      	strmi	r1, [r4, #0]
 80079ac:	b91b      	cbnz	r3, 80079b6 <_printf_i+0x15e>
 80079ae:	6822      	ldr	r2, [r4, #0]
 80079b0:	f022 0220 	bic.w	r2, r2, #32
 80079b4:	6022      	str	r2, [r4, #0]
 80079b6:	2210      	movs	r2, #16
 80079b8:	e7b7      	b.n	800792a <_printf_i+0xd2>
 80079ba:	064d      	lsls	r5, r1, #25
 80079bc:	bf48      	it	mi
 80079be:	b29b      	uxthmi	r3, r3
 80079c0:	e7ef      	b.n	80079a2 <_printf_i+0x14a>
 80079c2:	4665      	mov	r5, ip
 80079c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80079c8:	fb02 3311 	mls	r3, r2, r1, r3
 80079cc:	5cc3      	ldrb	r3, [r0, r3]
 80079ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079d2:	460b      	mov	r3, r1
 80079d4:	2900      	cmp	r1, #0
 80079d6:	d1f5      	bne.n	80079c4 <_printf_i+0x16c>
 80079d8:	e7b9      	b.n	800794e <_printf_i+0xf6>
 80079da:	6813      	ldr	r3, [r2, #0]
 80079dc:	6825      	ldr	r5, [r4, #0]
 80079de:	6961      	ldr	r1, [r4, #20]
 80079e0:	1d18      	adds	r0, r3, #4
 80079e2:	6010      	str	r0, [r2, #0]
 80079e4:	0628      	lsls	r0, r5, #24
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	d501      	bpl.n	80079ee <_printf_i+0x196>
 80079ea:	6019      	str	r1, [r3, #0]
 80079ec:	e002      	b.n	80079f4 <_printf_i+0x19c>
 80079ee:	066a      	lsls	r2, r5, #25
 80079f0:	d5fb      	bpl.n	80079ea <_printf_i+0x192>
 80079f2:	8019      	strh	r1, [r3, #0]
 80079f4:	2300      	movs	r3, #0
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	4665      	mov	r5, ip
 80079fa:	e7b9      	b.n	8007970 <_printf_i+0x118>
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	1d19      	adds	r1, r3, #4
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	681d      	ldr	r5, [r3, #0]
 8007a04:	6862      	ldr	r2, [r4, #4]
 8007a06:	2100      	movs	r1, #0
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f7f8 fbf1 	bl	80001f0 <memchr>
 8007a0e:	b108      	cbz	r0, 8007a14 <_printf_i+0x1bc>
 8007a10:	1b40      	subs	r0, r0, r5
 8007a12:	6060      	str	r0, [r4, #4]
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1e:	e7a7      	b.n	8007970 <_printf_i+0x118>
 8007a20:	6923      	ldr	r3, [r4, #16]
 8007a22:	462a      	mov	r2, r5
 8007a24:	4639      	mov	r1, r7
 8007a26:	4630      	mov	r0, r6
 8007a28:	47c0      	blx	r8
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d0aa      	beq.n	8007984 <_printf_i+0x12c>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	079b      	lsls	r3, r3, #30
 8007a32:	d413      	bmi.n	8007a5c <_printf_i+0x204>
 8007a34:	68e0      	ldr	r0, [r4, #12]
 8007a36:	9b03      	ldr	r3, [sp, #12]
 8007a38:	4298      	cmp	r0, r3
 8007a3a:	bfb8      	it	lt
 8007a3c:	4618      	movlt	r0, r3
 8007a3e:	e7a3      	b.n	8007988 <_printf_i+0x130>
 8007a40:	2301      	movs	r3, #1
 8007a42:	464a      	mov	r2, r9
 8007a44:	4639      	mov	r1, r7
 8007a46:	4630      	mov	r0, r6
 8007a48:	47c0      	blx	r8
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d09a      	beq.n	8007984 <_printf_i+0x12c>
 8007a4e:	3501      	adds	r5, #1
 8007a50:	68e3      	ldr	r3, [r4, #12]
 8007a52:	9a03      	ldr	r2, [sp, #12]
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	42ab      	cmp	r3, r5
 8007a58:	dcf2      	bgt.n	8007a40 <_printf_i+0x1e8>
 8007a5a:	e7eb      	b.n	8007a34 <_printf_i+0x1dc>
 8007a5c:	2500      	movs	r5, #0
 8007a5e:	f104 0919 	add.w	r9, r4, #25
 8007a62:	e7f5      	b.n	8007a50 <_printf_i+0x1f8>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1ac      	bne.n	80079c2 <_printf_i+0x16a>
 8007a68:	7803      	ldrb	r3, [r0, #0]
 8007a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a72:	e76c      	b.n	800794e <_printf_i+0xf6>
 8007a74:	08007d89 	.word	0x08007d89
 8007a78:	08007d9a 	.word	0x08007d9a

08007a7c <memmove>:
 8007a7c:	4288      	cmp	r0, r1
 8007a7e:	b510      	push	{r4, lr}
 8007a80:	eb01 0302 	add.w	r3, r1, r2
 8007a84:	d807      	bhi.n	8007a96 <memmove+0x1a>
 8007a86:	1e42      	subs	r2, r0, #1
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	d00a      	beq.n	8007aa2 <memmove+0x26>
 8007a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a94:	e7f8      	b.n	8007a88 <memmove+0xc>
 8007a96:	4283      	cmp	r3, r0
 8007a98:	d9f5      	bls.n	8007a86 <memmove+0xa>
 8007a9a:	1881      	adds	r1, r0, r2
 8007a9c:	1ad2      	subs	r2, r2, r3
 8007a9e:	42d3      	cmn	r3, r2
 8007aa0:	d100      	bne.n	8007aa4 <memmove+0x28>
 8007aa2:	bd10      	pop	{r4, pc}
 8007aa4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aa8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007aac:	e7f7      	b.n	8007a9e <memmove+0x22>
	...

08007ab0 <_free_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	d045      	beq.n	8007b44 <_free_r+0x94>
 8007ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007abc:	1f0c      	subs	r4, r1, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfb8      	it	lt
 8007ac2:	18e4      	addlt	r4, r4, r3
 8007ac4:	f000 f8d2 	bl	8007c6c <__malloc_lock>
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <_free_r+0x98>)
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	4610      	mov	r0, r2
 8007ace:	b933      	cbnz	r3, 8007ade <_free_r+0x2e>
 8007ad0:	6063      	str	r3, [r4, #4]
 8007ad2:	6014      	str	r4, [r2, #0]
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ada:	f000 b8c8 	b.w	8007c6e <__malloc_unlock>
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	d90c      	bls.n	8007afc <_free_r+0x4c>
 8007ae2:	6821      	ldr	r1, [r4, #0]
 8007ae4:	1862      	adds	r2, r4, r1
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	bf04      	itt	eq
 8007aea:	681a      	ldreq	r2, [r3, #0]
 8007aec:	685b      	ldreq	r3, [r3, #4]
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	bf04      	itt	eq
 8007af2:	1852      	addeq	r2, r2, r1
 8007af4:	6022      	streq	r2, [r4, #0]
 8007af6:	6004      	str	r4, [r0, #0]
 8007af8:	e7ec      	b.n	8007ad4 <_free_r+0x24>
 8007afa:	4613      	mov	r3, r2
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	b10a      	cbz	r2, 8007b04 <_free_r+0x54>
 8007b00:	42a2      	cmp	r2, r4
 8007b02:	d9fa      	bls.n	8007afa <_free_r+0x4a>
 8007b04:	6819      	ldr	r1, [r3, #0]
 8007b06:	1858      	adds	r0, r3, r1
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	d10b      	bne.n	8007b24 <_free_r+0x74>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	4401      	add	r1, r0
 8007b10:	1858      	adds	r0, r3, r1
 8007b12:	4282      	cmp	r2, r0
 8007b14:	6019      	str	r1, [r3, #0]
 8007b16:	d1dd      	bne.n	8007ad4 <_free_r+0x24>
 8007b18:	6810      	ldr	r0, [r2, #0]
 8007b1a:	6852      	ldr	r2, [r2, #4]
 8007b1c:	605a      	str	r2, [r3, #4]
 8007b1e:	4401      	add	r1, r0
 8007b20:	6019      	str	r1, [r3, #0]
 8007b22:	e7d7      	b.n	8007ad4 <_free_r+0x24>
 8007b24:	d902      	bls.n	8007b2c <_free_r+0x7c>
 8007b26:	230c      	movs	r3, #12
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	e7d3      	b.n	8007ad4 <_free_r+0x24>
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	1821      	adds	r1, r4, r0
 8007b30:	428a      	cmp	r2, r1
 8007b32:	bf04      	itt	eq
 8007b34:	6811      	ldreq	r1, [r2, #0]
 8007b36:	6852      	ldreq	r2, [r2, #4]
 8007b38:	6062      	str	r2, [r4, #4]
 8007b3a:	bf04      	itt	eq
 8007b3c:	1809      	addeq	r1, r1, r0
 8007b3e:	6021      	streq	r1, [r4, #0]
 8007b40:	605c      	str	r4, [r3, #4]
 8007b42:	e7c7      	b.n	8007ad4 <_free_r+0x24>
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	2000499c 	.word	0x2000499c

08007b4c <_malloc_r>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	1ccd      	adds	r5, r1, #3
 8007b50:	f025 0503 	bic.w	r5, r5, #3
 8007b54:	3508      	adds	r5, #8
 8007b56:	2d0c      	cmp	r5, #12
 8007b58:	bf38      	it	cc
 8007b5a:	250c      	movcc	r5, #12
 8007b5c:	2d00      	cmp	r5, #0
 8007b5e:	4606      	mov	r6, r0
 8007b60:	db01      	blt.n	8007b66 <_malloc_r+0x1a>
 8007b62:	42a9      	cmp	r1, r5
 8007b64:	d903      	bls.n	8007b6e <_malloc_r+0x22>
 8007b66:	230c      	movs	r3, #12
 8007b68:	6033      	str	r3, [r6, #0]
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	bd70      	pop	{r4, r5, r6, pc}
 8007b6e:	f000 f87d 	bl	8007c6c <__malloc_lock>
 8007b72:	4a21      	ldr	r2, [pc, #132]	; (8007bf8 <_malloc_r+0xac>)
 8007b74:	6814      	ldr	r4, [r2, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	b991      	cbnz	r1, 8007ba0 <_malloc_r+0x54>
 8007b7a:	4c20      	ldr	r4, [pc, #128]	; (8007bfc <_malloc_r+0xb0>)
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	b91b      	cbnz	r3, 8007b88 <_malloc_r+0x3c>
 8007b80:	4630      	mov	r0, r6
 8007b82:	f000 f863 	bl	8007c4c <_sbrk_r>
 8007b86:	6020      	str	r0, [r4, #0]
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f000 f85e 	bl	8007c4c <_sbrk_r>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d124      	bne.n	8007bde <_malloc_r+0x92>
 8007b94:	230c      	movs	r3, #12
 8007b96:	6033      	str	r3, [r6, #0]
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 f868 	bl	8007c6e <__malloc_unlock>
 8007b9e:	e7e4      	b.n	8007b6a <_malloc_r+0x1e>
 8007ba0:	680b      	ldr	r3, [r1, #0]
 8007ba2:	1b5b      	subs	r3, r3, r5
 8007ba4:	d418      	bmi.n	8007bd8 <_malloc_r+0x8c>
 8007ba6:	2b0b      	cmp	r3, #11
 8007ba8:	d90f      	bls.n	8007bca <_malloc_r+0x7e>
 8007baa:	600b      	str	r3, [r1, #0]
 8007bac:	50cd      	str	r5, [r1, r3]
 8007bae:	18cc      	adds	r4, r1, r3
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 f85c 	bl	8007c6e <__malloc_unlock>
 8007bb6:	f104 000b 	add.w	r0, r4, #11
 8007bba:	1d23      	adds	r3, r4, #4
 8007bbc:	f020 0007 	bic.w	r0, r0, #7
 8007bc0:	1ac3      	subs	r3, r0, r3
 8007bc2:	d0d3      	beq.n	8007b6c <_malloc_r+0x20>
 8007bc4:	425a      	negs	r2, r3
 8007bc6:	50e2      	str	r2, [r4, r3]
 8007bc8:	e7d0      	b.n	8007b6c <_malloc_r+0x20>
 8007bca:	428c      	cmp	r4, r1
 8007bcc:	684b      	ldr	r3, [r1, #4]
 8007bce:	bf16      	itet	ne
 8007bd0:	6063      	strne	r3, [r4, #4]
 8007bd2:	6013      	streq	r3, [r2, #0]
 8007bd4:	460c      	movne	r4, r1
 8007bd6:	e7eb      	b.n	8007bb0 <_malloc_r+0x64>
 8007bd8:	460c      	mov	r4, r1
 8007bda:	6849      	ldr	r1, [r1, #4]
 8007bdc:	e7cc      	b.n	8007b78 <_malloc_r+0x2c>
 8007bde:	1cc4      	adds	r4, r0, #3
 8007be0:	f024 0403 	bic.w	r4, r4, #3
 8007be4:	42a0      	cmp	r0, r4
 8007be6:	d005      	beq.n	8007bf4 <_malloc_r+0xa8>
 8007be8:	1a21      	subs	r1, r4, r0
 8007bea:	4630      	mov	r0, r6
 8007bec:	f000 f82e 	bl	8007c4c <_sbrk_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d0cf      	beq.n	8007b94 <_malloc_r+0x48>
 8007bf4:	6025      	str	r5, [r4, #0]
 8007bf6:	e7db      	b.n	8007bb0 <_malloc_r+0x64>
 8007bf8:	2000499c 	.word	0x2000499c
 8007bfc:	200049a0 	.word	0x200049a0

08007c00 <_realloc_r>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	4607      	mov	r7, r0
 8007c04:	4614      	mov	r4, r2
 8007c06:	460e      	mov	r6, r1
 8007c08:	b921      	cbnz	r1, 8007c14 <_realloc_r+0x14>
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c10:	f7ff bf9c 	b.w	8007b4c <_malloc_r>
 8007c14:	b922      	cbnz	r2, 8007c20 <_realloc_r+0x20>
 8007c16:	f7ff ff4b 	bl	8007ab0 <_free_r>
 8007c1a:	4625      	mov	r5, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c20:	f000 f826 	bl	8007c70 <_malloc_usable_size_r>
 8007c24:	42a0      	cmp	r0, r4
 8007c26:	d20f      	bcs.n	8007c48 <_realloc_r+0x48>
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	f7ff ff8e 	bl	8007b4c <_malloc_r>
 8007c30:	4605      	mov	r5, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d0f2      	beq.n	8007c1c <_realloc_r+0x1c>
 8007c36:	4631      	mov	r1, r6
 8007c38:	4622      	mov	r2, r4
 8007c3a:	f7ff fc11 	bl	8007460 <memcpy>
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff ff35 	bl	8007ab0 <_free_r>
 8007c46:	e7e9      	b.n	8007c1c <_realloc_r+0x1c>
 8007c48:	4635      	mov	r5, r6
 8007c4a:	e7e7      	b.n	8007c1c <_realloc_r+0x1c>

08007c4c <_sbrk_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4c06      	ldr	r4, [pc, #24]	; (8007c68 <_sbrk_r+0x1c>)
 8007c50:	2300      	movs	r3, #0
 8007c52:	4605      	mov	r5, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	f7fa f86c 	bl	8001d34 <_sbrk>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_sbrk_r+0x1a>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_sbrk_r+0x1a>
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	20004b5c 	.word	0x20004b5c

08007c6c <__malloc_lock>:
 8007c6c:	4770      	bx	lr

08007c6e <__malloc_unlock>:
 8007c6e:	4770      	bx	lr

08007c70 <_malloc_usable_size_r>:
 8007c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c74:	1f18      	subs	r0, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfbc      	itt	lt
 8007c7a:	580b      	ldrlt	r3, [r1, r0]
 8007c7c:	18c0      	addlt	r0, r0, r3
 8007c7e:	4770      	bx	lr

08007c80 <_init>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

08007c8c <_fini>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr
